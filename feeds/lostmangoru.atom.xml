<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.gorugle.org</title><link href="/" rel="alternate"></link><link href="/feeds/lostmangoru.atom.xml" rel="self"></link><id>/</id><updated>2016-12-10T18:53:00+09:00</updated><entry><title>グローバル版のXperia X Compactを買ってみた</title><link href="/posts/2016/12/f5321.html" rel="alternate"></link><updated>2016-12-10T18:53:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2016-12-10:posts/2016/12/f5321.html</id><summary type="html">&lt;p&gt;Amazon.deで &lt;a href="https://www.amazon.de/gp/product/B01L34I7HY"&gt;Xperia X Compact (F5321)&lt;/a&gt; が安売りしていたので購入。 ( &lt;a href="https://jetstream.bz/archives/44764"&gt;Jetstream BLOG&lt;/a&gt; )
海外のAmazonで買い物をするのは初めてだったのでまとめてみました。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/12/20161210183658.jpg"&gt;&lt;img alt="image" src="/static/images/2016/12/20161210183658_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11月7日頃、Amazon.deでのVAT込みの値段が50ユーロ引きの399ユーロでした。 (当時のレートがだいたい115円だったので45885円)
それまではポンドが安かったのでCloveで購入しようかと考えていたのですが、このタイミングで逆転したのでAmazon.deで買うことにしました。&lt;/p&gt;
&lt;p&gt;海外のAmazonでは日本のAmazonのアカウントは使えないので新しく作る必要がありました。
今回はAmazon.deを使いましたが、日本以外の国のAmazonのアカウントは共通で使えるそうです。&lt;/p&gt;
&lt;p&gt;Amazon.deで購入する場合に掛かる金額は以下の3種類でした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品代金(VAT抜き) + 送料 + デポジット&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Amazonでの価格はVAT(付加価値税)込みの表示なのですが、このVATというのがよくわかっていませんでした。
&lt;a href="http://ec.europa.eu/taxation_customs/sites/taxation/files/resources/documents/taxation/vat/how_vat_works/rates/vat_rates_en.pdf"&gt;ドイツのVATは19%&lt;/a&gt; で海外から購入する場合は課税の対象外になるそうです。
なので日本から購入する場合は、399ユーロと表示されていたら19%の課税前の335.29ユーロが実際の価格になります。
この価格はAmazonであればカートに入れて注文画面まで進むと確認することができました。&lt;/p&gt;
&lt;p&gt;Amazon.deから日本へ発送する場合は、 &lt;a href="https://www.amazon.de/gp/help/customer/display.html?nodeId=201910850#GUID-94F272E0-F280-4956-87FB-E99C2528462A__SECTION_386D40FABC914DB1941850CE711B83C5"&gt;2つのオプション&lt;/a&gt; から選ぶことができました。
今回は速い方の配送オプションを選択してみました。
注文画面では27.11ユーロになっていました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AmazonGlobal Eilzustellung (8-12 working days), EUR 18.50 per deliver + 5.00 per kg (proportionally)&lt;/li&gt;
&lt;li&gt;AmazonGlobal Express Delivery (2-4 working days), EUR 25.50 per delivery + 5.00 per kg (proportionally) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デポジットですが、海外から購入する場合は日本の税関で日本の消費税の支払いが必要になるそうです。
多くの場合配送業者が立て替えて引渡し時に支払いをするか、あとで請求されるか、だそうですが
Amazonでは予めある程度の金額を取っておいてそれを支払いに充て、余ったらあとで返金をするという仕組みになっているそうです。
今回の場合28.99ユーロになっていました。&lt;/p&gt;
&lt;p&gt;最終的にトータル 335.29 + 27.11 + 28.99 で391.39ユーロなのでだいたい45000円前後で購入できました。(と思っていました)&lt;/p&gt;
&lt;p&gt;9日の夜に注文してわくわくして待っていたのですが、一週間経ってもAmazon側で何の処理もされていないようで全く発送される気配がありません。
在庫があるにも関わらずステータスの画面では16日までWill Dispatchの状態のままでした。
メールをして確認をしてもらうことも考えたのですが、やり取りに更に数日掛かりそうなので、一度注文をキャンセルして再注文してみることにしました。
16日に再注文して、今度はすぐDispatchされて18日に発送、21日に手元に到着しました。&lt;/p&gt;
&lt;p&gt;アメリカの大統領選のあとでユーロ高が進んでいる状況だったので、カード会社に請求が届いて実際に円での支払いがいくらになるのか読めない状況でした。
発送された18日のタイミングでは117円、実際のカード会社の請求は19日に換算で、使われたレートは119.439円でした。
したがって 391.39 * 119.439 で46747円が実際に支払った金額になりました。&lt;/p&gt;
&lt;p&gt;ちなみに、梱包はすごく簡素 (&lt;del&gt;雑&lt;/del&gt;) で緩衝材も使われておらず薄めのダンボールでできた封筒のようなものに商品がそのまま入れられていました。
梱包の中で商品の箱が移動してしまうような状態で擦れて箱がすごく汚れていました。
壊れていたわけではないのですがこれには正直がっかりしました。&lt;/p&gt;
&lt;p&gt;端末自体は非常に満足しています。
Felicaが載っていないのでオフィスのドアが開けられないのは残念ですが、グローバル版も防水だということなのでいつも通り風呂で使っています。&lt;/p&gt;
&lt;p&gt;USB-Cケーブルがまだ高いと感じたので、とりあえず &lt;a href="http://amzn.asia/2lnlcOZ"&gt;AnkerのUSB-C変換アダプタ&lt;/a&gt; を使っています。
フィルムは &lt;a href="http://amzn.asia/7eJcp9d"&gt;レイアウトのTPUフィルム&lt;/a&gt; と &lt;a href="http://amzn.asia/iDImcvF"&gt;背面用&lt;/a&gt; を買ってみました。
背面に関してはフィルムの厚みの段差が気になるという点 (これは仕方ない) を除いて、カーブしている部分まで含めて全面がカバーされるのでよさそうです。
表面のフィルムも商品の説明にはフルカバーと書いてあるのですが、背面と違い横幅がカーブしている部分までではなく、液晶部分より少し広いくらいでした。
手触りは滑りもよく満足しているのですが、カバーしている範囲がいまいちなのでこちらは買い換えるかもしれません。&lt;/p&gt;</summary><category term="Android"></category><category term="F5321"></category></entry><entry><title>AnniversaryUpdate適用後にNW-E052が認識されなくなる問題の対応</title><link href="/posts/2016/08/nw-e052.html" rel="alternate"></link><updated>2016-08-28T01:26:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2016-08-28:posts/2016/08/nw-e052.html</id><summary type="html">&lt;h3&gt;何が起きたか&lt;/h3&gt;
&lt;p&gt;妻のマシンをWindows10へアップデートしたあとしばらくしてから(AnniversaryUpdate適用後)、Walkmanが使えなくなったと言われました。
具体的には以下のような画面が表示されたので本体の初期化をしたが状況が改善されない、ということでした。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/08/walkman-01.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-01_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2016/08/walkman-02.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-02_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常WalkmanはUSBメモリと同じようにエクスプローラに表示されるのでプロパティを確認してみると、
このようになっていてドライブとして正しく認識されていないようでした。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/08/walkman-03.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-03_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンピュータの管理から確認してみるとこう。ボリュームが無いように見えます。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/08/walkman-04.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-04_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;公式の情報&lt;/h3&gt;
&lt;p&gt;Windowsのアップデートをする前は特に問題なく使えていたということでした。
アップデートが原因だとはあまり考えられないのではと思ったのですが、調べてみたら公式のアナウンスを見つけることができました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.sony.jp/support/walkman/index.html"&gt;Windows 10 Anniversary Update適用後のパソコンでウォークマン®が認識されない症状について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qa.support.sony.jp/solution/S1608150081554/"&gt;詳細&lt;/a&gt; (当時このページは存在しませんでした。)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここにはE080/S10/S770/S780で問題が起きること、これらのモデルはソフトウェアアップデートで対応することが書かれていました。
手元のNW-E052でも同様の問題が起きていましたが、サポートが切れているためかここでは触れられていませんでした。
また当時は暫定の回避策の情報もなかったので打てる対策がない状況でした。&lt;/p&gt;
&lt;h3&gt;見つけた対応策&lt;/h3&gt;
&lt;p&gt;買い換えるしかないのかなぁと思ったのですが、なんとか回避できないかと思ってしつこく調べていたら &lt;a href="http://hanabi.2ch.net/test/read.cgi/wm/1451440843/269"&gt;認識するようにできたという情報&lt;/a&gt; があったので試してみました。
結果的にあとからアナウンスされた公式の回避策も含めて以下の2通りの方法があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows10以外またはAnniversaryUpdate未適用のPCでフォーマットする。 (公式)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forest.watch.impress.co.jp/library/software/partwizhome/"&gt;MiniTool Partition Wizard&lt;/a&gt; というツールを使ってWalkmanのボリュームに対し &lt;code&gt;Set inactive&lt;/code&gt; という操作をする。 (非公式)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;環境を用意できる人は1の公式の対応策に従ってください。
ただこの公式の方法ですが、普通の人は他のPCを用意できない場合が多いと思います。
が、AnniversaryUpdate適用済みのPCでも復活させる方法を偶然見つけたのでこちらも書いておきます。&lt;/p&gt;
&lt;h3&gt;AnniversaryUpdate適用済みのPCでボリュームを(再)作成する&lt;/h3&gt;
&lt;p&gt;AnniversaryUpdate適用済みのPCで公式の対応策の通りにエクスプローラからフォーマットをすると、正しく認識されていないので失敗します。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/08/walkman-05.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-05_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2016/08/walkman-06.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-06_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;はじめに載せたコンピュータの管理の画面を見るとボリュームが作成されていないように見えるので、
以下のようにして新しいボリュームを作成するとx-アプリから認識できるようになりました。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/08/walkman-07.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-07_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2016/08/walkman-08.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-08_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MiniTool Partition Wizardで見るとボリューム自体は存在しているため、Windowsがうまく認識できない状態になっているようです。
この方法では既存のデータが全て削除されます。&lt;/p&gt;
&lt;h3&gt;MiniTool Partition Wizardで修復する&lt;/h3&gt;
&lt;p&gt;MiniTool Partition Wizardをインストールして起動するとWalkmanのボリュームが存在することが確認できます。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/08/walkman-09.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-09_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WALKMAN(FAT)&lt;/code&gt; のバーを右クリックして &lt;code&gt;Set inactive&lt;/code&gt; をクリックしてから、左上の &lt;code&gt;Apply&lt;/code&gt; を押して変更を実際に書き込みます。
下のStatusカラムの値が &lt;code&gt;Active&lt;/code&gt; から &lt;code&gt;None&lt;/code&gt; に変わっていることが確認できます。
この方法では既存のデータは削除されない(と思います)。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2016/08/walkman-10.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-10_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2016/08/walkman-11.png"&gt;&lt;img alt="image" src="/static/images/2016/08/walkman-11_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;結果&lt;/h3&gt;
&lt;p&gt;どちらの場合もx-アプリから認識でき、音楽の転送もできる状態になりました。
また本体の初期化をすると再度認識できない状態に戻ることも確認済みです。
今回紹介した対策はどちらも公式の対応策とは異なるので何らかの問題が起きるかもしれません。
公式の情報が更新されたらそちらに従うようにしましょう。
サポートから外れているモデルに関してはこのまま騙し騙し使うか、新しいモデルに乗り換えるしかなさそうですが…。&lt;/p&gt;
&lt;p&gt;今回の問題ですが、おそらく元々Windows側のチェックが甘かったのが正しく修正されたのではないかと想像しています。
Walkmanのフォーマットの実装がイマイチでそのチェックに引っかかってしまうようになったのではないかなと。
MBRのダンプを取って差分を比較すればわかるかもしれないですね。&lt;/p&gt;</summary><category term="Hardware"></category><category term="Walkman"></category><category term="Windows"></category></entry><entry><title>秋月電子で買えるIGZO液晶のケースを作ってみた</title><link href="/posts/2015/12/akizuki-igzo-case.html" rel="alternate"></link><updated>2015-12-29T17:04:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-12-29:posts/2015/12/akizuki-igzo-case.html</id><summary type="html">&lt;p&gt;&lt;a href="akizuki-igzo.html"&gt;前回&lt;/a&gt; 動作確認をした液晶ですが、ケースの加工の見積もりを依頼した業者がどうも信用できない印象だったのでキャンセルしました。
レーザーカッターを使わせてもらえる場所がいくつかあるので、そこを利用して自作することにしました。
そのうちリーズナブルで講習を受ける必要もないし場所も職場とそれほど離れていなかったため &lt;a href="http://fabcafe.com/tokyo/"&gt;FabCafe Tokyo&lt;/a&gt; でカットしてもらうことにしました。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fabcafe.com/tokyo/fab_details#universal-laser-vls"&gt;レーザーカッター&lt;/a&gt; の説明にあるように、Drop-inでの利用は10分800円。
データの作成方法は簡単にですが &lt;a href="http://fabcafe.com/tokyo/faq#laser-cutter"&gt;FAQ&lt;/a&gt; に書いてありました。
ただ見るべき場所が分散しているので、FAQからの抜粋と今回実際に利用してみてわかったことをまとめておきます。&lt;/p&gt;
&lt;p&gt;素材について (主にアクリル板について)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;800x450mmまでの素材をカット可能&lt;/li&gt;
&lt;li&gt;アクリル板の場合、厚みは最大5mmまで&lt;/li&gt;
&lt;li&gt;上記の制限内であれば持ちこみ可能&lt;/li&gt;
&lt;li&gt;150x150mm、2mm厚のアクリル板は店頭で購入できる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データについて&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;図面のデータはIllustrator CS4形式を推奨&lt;/li&gt;
&lt;li&gt;カラーモードはRGB&lt;/li&gt;
&lt;li&gt;カットしたい線の太さは0.01pt、色はRGBで255,0,0&lt;/li&gt;
&lt;li&gt;カットする順序を変えたい場合は赤と緑以外で別の色にしておく (今回は0,255,255を使用)&lt;/li&gt;
&lt;li&gt;彫刻する面は、線無し、塗りつぶしの色は0,255,0&lt;/li&gt;
&lt;li&gt;上記の条件を満たしていればInkscapeで作成したSVGでも可 (今回は問題なかった、ズレる可能性はある)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inkscapeについて&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;はじめに &lt;code&gt;ファイル -&amp;gt; ドキュメントのプロパティ&lt;/code&gt; でページサイズの単位を &lt;code&gt;mm&lt;/code&gt; へ変更し、サイズを素材のサイズに変更する。&lt;/li&gt;
&lt;li&gt;線の太さを0.01ptにすると細すぎて見えなくなるので &lt;code&gt;表示 -&amp;gt; 表示モード -&amp;gt; アウトライン&lt;/code&gt; に変更する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;オブジェクト -&amp;gt; フィル/ストローク&lt;/code&gt; で選択したオブジェクトの線の太さや、色等を変更できる。
(おそらく、だけれどページサイズの単位に線の太さの単位が引きずられている。線の太さの単位が毎回mmになってしまう。このため、一度0.01ptに変更してもフィル/ストロークの画面を出すと0.004mmで上書きされてしまう。再度単位をptに変更すると小数の演算の結果0.011ptになってしまう(うまく割り切れないからだと思う)。注意が必要。)&lt;ul&gt;
&lt;li&gt;カットしたい線は フィル: &lt;code&gt;塗りなし&lt;/code&gt; ストロークの塗り: &lt;code&gt;255,0,0&lt;/code&gt; ストロークのスタイル: &lt;code&gt;0.01pt&lt;/code&gt; に変更する。&lt;/li&gt;
&lt;li&gt;彫刻のは フィル: &lt;code&gt;0,255,0&lt;/code&gt; ストロークの塗り: &lt;code&gt;塗りなし&lt;/code&gt; に変更する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;複数のオブジェクトをグループ化しておくとIllustratorで開いた時に線の太さがおかしくなるので、最終的にグループ化を全て解除した状態で保存しておく。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の注意点を考慮して作成したSVGがこちら。 (画像を右クリックしてリンク先を保存してください。)&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/Akizuki-IGZO-2mm.svg"&gt;&lt;img alt="image" src="/static/images/2015/12/Akizuki-IGZO-2mm_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/12/Akizuki-IGZO-3mm.svg"&gt;&lt;img alt="image" src="/static/images/2015/12/Akizuki-IGZO-3mm_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この図面には以下のパーツが含まれています。
これら以外の部分は空き領域で、再利用しやすいように四角形にカットするようにしています。
(液晶の周囲を覆っている枠が3mmでもよい、RaspberryPiは要らないなど割り切れば3mmの板1枚でも収まりますね。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;液晶の周囲を覆う枠 (2mm) x1&lt;/li&gt;
&lt;li&gt;基板を取り付ける際に使用するスペーサー (2mm) x8&lt;/li&gt;
&lt;li&gt;液晶の表面側の板 (3mm) x1&lt;/li&gt;
&lt;li&gt;基板を取り付ける板 (液晶の基板とRaspberry Pi Zeroを取り付けることができます) (3mm) x1&lt;/li&gt;
&lt;li&gt;基板の厚み分の高さを稼ぐための枠 (3mm) x3&lt;/li&gt;
&lt;li&gt;上記枠で支えていない1点に使用するためのスペーサー (3mm) x3&lt;/li&gt;
&lt;li&gt;裏蓋 (3mm) x1&lt;/li&gt;
&lt;li&gt;裏蓋 (Raspberry Pi Zeroマウント時はこちらを使用) (3mm) x1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回アクリル板に穴は用意してありますが、液晶の小さい方の基板は固定しませんでした。
それを前提に購入した最低限必要なパーツを以下に挙げます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/dp/B001D7BTK4"&gt;光 スミホリデー アクリル板 透明 2x180x320mm A000-2SS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/dp/B001D7BTNG"&gt;光 スミホリデー アクリル板 透明 3x320x545mm A000-3S&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/dp/B002UNMGC0"&gt;SK11 六角軸 フリードリル 鉄工用 10mm&lt;/a&gt; (表側の板に皿ネジを使いたいため購入)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/dp/B00MIA7HQK"&gt;インサートナット M2 3mm HSB-203030&lt;/a&gt; x4 (Raspberry Pi Zero用)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/dp/B00MIA6H0W"&gt;インサートナット M3 3mm HSB-304530&lt;/a&gt; x8-22 (液晶の基板、裏蓋用)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hands.net/goods/4979874465863/"&gt;皿ネジ M3 20mm&lt;/a&gt; x4 (表面からから裏蓋まで通して固定するためのネジ)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hands.net/goods/4979874462527/"&gt;なべ小ねじ M2 6mm&lt;/a&gt; x4 (Raspberry Pi Zero用)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hands.net/goods/4979874462633/"&gt;なべ小ねじ M3 6mm&lt;/a&gt; x4 (液晶の大きい方の基板用)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SVGファイルを保存したUSBメモリと、アクリル板を購入してFabCafeに行けばカットしてもらえます。
Drop-inで利用したので &lt;strong&gt;当日の開店時間&lt;/strong&gt; に電話で枠の空き状況を確認して予約した上で店頭へ行きます。
予約時に素材を確認されるので、アクリル板を持ち込みたいと伝えました。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/20151224103408.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/20151224103408_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自分の番がきたら店員にUSBメモリと素材を渡します。
店員と一緒にデータに問題がないか確認します。
&lt;strong&gt;カットしたい順序を変えるために色を変える&lt;/strong&gt; はFAQには書いていないので、この時に伝える必要があると思われます。
(僕は2mmの方のカット時に順序を定義していなかったのでスペーサーの部分が失敗しました。
失敗に気がついて質問をしたら順序を決めたい場合は色を変えておく必要があると言われました。)
データに問題がないことが確認できたらあとはおまかせでカットが終わるまで待つだけです。
なにか飲み物を飲みながら終わるのを待ちましょう。
(僕は気になって仕方なかったのでずっとレーザーカッターの動きを眺めていました。)
今回はトータルで20分でした。
ただこれは空き領域に他のものも入れてカットした時間なので実際にはもう少し短くなると思います。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/20151224104559.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/20151224104559_s.JPG" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/12/20151224110710.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/20151224110710_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;カットが終わったら不要な枠は取り外して捨ててもらいましょう。
レジで飲み物の代金とカットの代金を合わせて支払えば終わりです。
今回は20分だったので1600円でした。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/DSC_0628.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/DSC_0628_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;アクリル板のカットが済んだので皿ネジ用の穴の加工とインサートナットの取り付けです。
皿ネジ用の穴は、購入したフリードリルを使用して表面に使用する板に開いている穴を現物合わせで拡張しました。
インサートナットははんだごてを使用して挿入しました。
フレキシブルケーブルが少しギリギリになってしまいましたが概ね問題なく組み立てることができました。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/DSC_0644.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/DSC_0644_s.JPG" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/12/DSC_0660.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/DSC_0660_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/DSC_0658.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/DSC_0658_s.JPG" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/12/DSC_0657.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/DSC_0657_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;皿ネジとインサートナットのおかげで両面ともフラットですっきり仕上げることができました。
最後に動作確認をすれば終わりです。
僕の場合この時にフレキシブルケーブルが半分抜けかかっていて映りませんでした。(気をつけましょう…)&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/DSC_0652.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/DSC_0652_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;トータルで掛かった金額は工具(ドリル)抜きで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アクリル板が2枚で2134円&lt;/li&gt;
&lt;li&gt;加工代が20分で1600円&lt;/li&gt;
&lt;li&gt;インサートナットが2セットで1123円&lt;/li&gt;
&lt;li&gt;ネジが3種類で350円&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で5207円でした。&lt;/p&gt;
&lt;p&gt;本文中で書いたように実際に使ってみないとわからないことがいくつかありました。
線の順序だったりとか、他に気になったのは素材の扱いです。
店員に渡すとレーザーカッターにセットして作業を始めてくれるのですが、まず素材を正確に配置する必要があります。
そのため位置を合わせてレーザーカッターを動作させて確認、という作業を何度か繰り返します。
この時レーザーカッターの網のような台の上に素材を置いていて、位置をずらして調節していました。
そのため保護されていない部分に網で傷が付いてしまいました。(店員にもよると思いますが…)
購入したアクリル板は左上の一部分に保護されていない領域があったので、あらかじめ避けるなどしておいたほうがよかったと思いました。&lt;/p&gt;
&lt;p&gt;終えてみて、FabCafeはとても有用なサービスだと感じました。
他のサービスでは機器の使い方の講習を受けて自分で操作する必要があるサービスが多い印象です。
機器の操作方法を学ぶのも面白いと思うのですが、お金と時間が掛かるので目的のものをすぐに手に入れることができません。
FabCafeはデータを渡すだけでよいというのも手軽だし、物もその場で手に入ります。
自分の用途に合った物を自分で作れるのは素晴らしいですね。
レーザーカッター欲しい…&lt;/p&gt;</summary><category term="Hardware"></category><category term="SHARP"></category><category term="IGZO"></category><category term="FabCafe"></category><category term="Inkscape"></category></entry><entry><title>秋月電子で買えるIGZO液晶を試してみた</title><link href="/posts/2015/12/akizuki-igzo.html" rel="alternate"></link><updated>2015-12-18T02:04:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-12-18:posts/2015/12/akizuki-igzo.html</id><summary type="html">&lt;p&gt;秋月電子で &lt;a href="http://akizukidenshi.com/catalog/g/gM-10016/"&gt;SHARPの7インチIGZO液晶モジュール&lt;/a&gt; を購入したらあっという間に届いたので動作確認してみました。
動作確認自体は土曜に終わっていて、本当はアクリルのケースを作成してから記事を書くつもりでした。
が、月曜の夜に見積もり依頼を出して既に木曜の深夜です…
メールには2営業日と書いてあったのに何が起きているんだろうなぁと少しイラッときたので先に記事だけ書いてしまうことにしました。
(ちなみに今日くらいから &lt;a href="http://blog.siliconhouse.jp/archives/52092332.html"&gt;シリコンハウスでも購入できる&lt;/a&gt; みたいですね。)&lt;/p&gt;
&lt;p&gt;組み立てと接続に関しては付属の説明書を参考にすれば特に問題なく済ませることができると思います。
注意すべきことがあるとすれば、細い方のフレキシブルケーブルのコネクタは、開く方向が太い方とは逆になっていた点くらいです。
あとは単純に壊さないように作業するだけです。(すごく壊れやすそうなので何度も作業したくない感じでした。)&lt;/p&gt;
&lt;p&gt;映像の出力機器に関して、とりあえず普段使用している &lt;a href="http://www.amazon.co.jp/dp/B00E3AHJDO"&gt;MiniDP-HDMI変換ケーブル&lt;/a&gt; を使ってMBAと接続してみたのですが無反応でした。
次にGentooがインストールされているデスクトップと &lt;a href="http://www.amazon.co.jp/dp/B000T738TE"&gt;DVI-HDMI変換ケーブル&lt;/a&gt; を使って接続してみたら、こちらはうまく表示されました。
MBAが悪いのか、変換ケーブルが悪いのかは切り分けることができていませんが多少相性はあるようです。
Twitterでも報告している人がいましたが接続する機器によっては映らないということがわりと当たり前に起こりそうです。こわいですね。&lt;/p&gt;
&lt;p&gt;下の画像はデスクトップに接続して画面を左に90度回転した状態で撮影したものです。
この液晶の仕様でデフォルトでは縦画面の1200ｘ1920で認識されるようです。
なので、横向きで使用したい場合はOS側で画面を回転させてやる必要があります。
(この仕様のせいでおそらくPC以外の機器との接続が難しくなっているのだと思われます。)&lt;/p&gt;
&lt;p&gt;Gentoo(Linux)のXでは &lt;code&gt;xrandr&lt;/code&gt; というコマンドがあり、これを利用すると画面を回転させることができます。
今回はこのように &lt;code&gt;xrandr -o left&lt;/code&gt; 実行しました。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/DSC_0595.JPG"&gt;&lt;img alt="image" src="/static/images/2015/12/DSC_0595_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;アクリルケースに関しては、本当はCADやIllustratorを使用して書くのかもしれませんが、木材を使った家具のイメージ作りのために &lt;a href="https://www.sketchup.com/ja"&gt;SketchUp&lt;/a&gt; を使っていて、これでも書けそうだったので使ってみました。
&lt;strong&gt;僕はまだ実物を手に入れていない&lt;/strong&gt; のでこれでうまく収まるのかはよくわかりませんが、作った図面を貼り付けておこうと思います。
元データが欲しい方は こちら からダウンロードできるようにしておきました。
(もし誰か僕より先にこの実物を手に入れた人がいたら、フィードバックを貰えるとありがたいです…)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;新しい図面を作成してレーザーカッターを使って実際にケースを作成してみたので &lt;a href="akizuki-igzo-case.html"&gt;こちら&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/static/images/2015/12/Akizuki-IGZO_1_s.png" /&gt;
&lt;img alt="image" src="/static/images/2015/12/Akizuki-IGZO_2_s.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/static/images/2015/12/Akizuki-IGZO_3_s.png" /&gt;
&lt;img alt="image" src="/static/images/2015/12/Akizuki-IGZO_4_s.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/static/images/2015/12/Akizuki-IGZO_5_s.png" /&gt;&lt;/p&gt;
&lt;p&gt;表面、裏面共にネジを使用する部分はサラザグリにしてフラットになるようにしました。
依頼を予定している業者が厚みが3mm以下のアクリル板に対してサラザグリの加工を受け付けていないようだったので、この加工をする必要がある板は3mm厚になっています。
もし必要なければ普通の穴に変更してアクリルの厚さも薄くできるはずです。
他にRaspberryPi Zeroの &lt;a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/mechanical/rpi-zero-v1_2_dimensions.pdf"&gt;公式の仕様&lt;/a&gt; を参考にマウントできるネジ穴を設けました。
M2.5のタップ穴も受け付けていないようだったのでM2になっています。
近い将来RaspberryPi Zeroが普通に入手できるようになったらここにマウントできるはずです。
液晶の変換基板、RaspberryPi共に2mmか3mmのスペーサーを挟んで3枚目の板に固定します。
一部のネジは5枚目の板と共にネジで固定するようになっています。こちらにもスペーサーが必要です。
あと板の四隅のうち右下のネジ穴は4枚目の厚みの分、ここにも10mmのスペーサーが必要です。
これら以外には特に特筆すべき点はありません、ただコネクタ周りのクリアランスに問題がないかはわかっていません。
おそらくL型のケーブルで接続する必要があると思われます。&lt;/p&gt;
&lt;p&gt;さて、いつ見積もりの結果が来るかなぁ…
&lt;a href="http://fabcafe.com/tokyo/fab_details"&gt;FabCafe Tokyo&lt;/a&gt; ではデータと素材を持ち込むとレーザーカッターで加工をしてくれるみたいなので、もしかしたら図面を作りなおしてそちらにトライするかもしれません。
正直手間とかを考えたら多少高くても業者にお願いした方が楽だろうと思っていたのですが、想像以上にレスポンスが悪いので迷っているところです。&lt;/p&gt;</summary><category term="Hardware"></category><category term="SHARP"></category><category term="IGZO"></category><category term="Gentoo"></category><category term="Linux"></category></entry><entry><title>ESP-WROOM-02をArduinoとして使ってみた</title><link href="/posts/2015/12/esp-wroom-02-arduino.html" rel="alternate"></link><updated>2015-12-06T19:00:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-12-06:posts/2015/12/esp-wroom-02-arduino.html</id><summary type="html">&lt;p&gt;前回はPCからATコマンドをESP-WROOM-02へ送信してサーバからデータを取得してみました。
今回はESP-WROOM-02をArduinoとして動作させてみたいと思います。
外部機器を必要とせずArduinoとして自立して動作するので、センサーのデータを継続的に送信するデバイスの作成等が容易にできるようになるはずです。&lt;/p&gt;
&lt;p&gt;まずBoards ManagerをサポートしているArduino IDEが必要なので &lt;a href="https://www.arduino.cc/en/Main/Software"&gt;公式サイト&lt;/a&gt; から最新の1.6.6をダウンロードしてインストールしておきます。
手元の環境は古いままで1.0.6がインストールされていました。&lt;/p&gt;
&lt;p&gt;Arduino IDEを起動したらBoards ManagerにESP8266のサイトを登録します。
ソースはgithubの &lt;a href="https://github.com/esp8266/Arduino"&gt;esp8266/Arduino&lt;/a&gt; で管理されていて手順が記載されていました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Arduino -&amp;gt; Preferences -&amp;gt; Additional Board Manager URLs&lt;/code&gt; を開いて &lt;code&gt;http://arduino.esp8266.com/stable/package_esp8266com_index.json&lt;/code&gt; を追加します。&lt;/li&gt;
&lt;li&gt;Arduino IDEを一度再起動して、 &lt;code&gt;Tools -&amp;gt; Board -&amp;gt; Boards Manager&lt;/code&gt; を開きます。
自動で一覧が読み込まれ、 &lt;code&gt;esp8266 by ESP8266 Community&lt;/code&gt; が表示されているはずなので選択してインストールします。 (現時点では2.0.0でした。)&lt;/li&gt;
&lt;li&gt;インストール後にもう一度IDEを再起動して (Boardの表示が二重になっていておかしかったので) &lt;code&gt;Tools -&amp;gt; Board -&amp;gt; Generic ESP8266 Module&lt;/code&gt; を選択します。&lt;/li&gt;
&lt;li&gt;最後に &lt;code&gt;Tools -&amp;gt; Port -&amp;gt;&lt;/code&gt; で接続しているUSBシリアルのデバイスを選択すれば準備は完了です。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;スケッチを書き込むにはESP-WROOM-02をUART download modeで起動する必要があります。 (&lt;a href="http://doc.switch-science.com/datasheets/0B-ESP8266__Hardware_User_Guide__EN_v1.1.pdf"&gt;Hardware User Guide&lt;/a&gt; の &lt;code&gt;4.2. Download Firmware&lt;/code&gt; )
他の人の作例では &lt;code&gt;IO0&lt;/code&gt; と &lt;code&gt;RST&lt;/code&gt; にタクトスイッチを接続しているケースが多いようで、以下の動作になるようにスイッチを操作します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IO0をGNDと接続&lt;/li&gt;
&lt;li&gt;ESP-WROOM-02を(再)起動&lt;/li&gt;
&lt;li&gt;IO0をGNDから切断 (起動したタイミングでのみチェックしているので)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;とりあえず空のスケッチを書き込んでみたらこのように出力されたのでうまくできていそうです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Sketch uses 198,580 bytes (45%) of program storage space. Maximum is 434,160 bytes.
Global variables use 32,982 bytes (40%) of dynamic memory, leaving 48,938 bytes for local variables. Maximum is 81,920 bytes.
Uploading 202736 bytes from /var/folders/2r/gnf1wxzd7ysd8ps4cwmhpsn00000gp/T/build47405d589e6a6ed4482aeeb82c132d10.tmp/sketch_dec06a.ino.bin to flash at 0x00000000
......................................................................................................................................................................................................
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;試しにアクセスポイントへ接続して、ウェブサーバーから取得したデータを、シリアル経由で送信するスケッチを &lt;a href="https://github.com/lostman-github/arduino/blob/master/ESP-WROOM-02/httpclient/httpclient.ino"&gt;書いてみました&lt;/a&gt; 。
(一度だけ実行されればいいのでsetupに全ての処理を書いています。)
上述の手順でスケッチをアップロードし、アップロードが終わったらシリアルモニタを開いてみましょう。
シリアルモニタに取得したHTMLが表示されていれば成功です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;ESP8266WiFi.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define WIFI_SSID   &amp;quot;&amp;lt;SSID&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define WIFI_PASSWD &amp;quot;&amp;lt;PASSWORD&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#define TARGET_HOST &amp;quot;www.google.com&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define TARGET_PORT 80&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;115200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connecting to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIFI_SSID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;WiFi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WIFI_SSID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WIFI_PASSWD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WiFi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;WL_CONNECTED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IP address is &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WiFi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localIP&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="n"&gt;WiFiClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connecting to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TARGET_HOST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TARGET_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TARGET_PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not connect.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET / HTTP/1.0&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readStringUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// put your main code here, to run repeatedly:&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでArduinoとしての動作が確認できました。
ESP-WROOM-02にセンサーをつないだり、液晶をつないだりしてネットワークに接続できるデバイスを簡単に作ることができそうです。&lt;/p&gt;</summary><category term="ESP-WROOM-02"></category><category term="Arduino"></category></entry><entry><title>GentooとNginxでLet's Encryptを使う</title><link href="/posts/2015/12/letsencrypt.html" rel="alternate"></link><updated>2015-12-05T22:30:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-12-05:posts/2015/12/letsencrypt.html</id><summary type="html">&lt;p&gt;&lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; がPublic Betaになったので使ってみました。
Gentooに関してはまだ実験的なサポートで、Nginxはこれからプラグインが取り込まれる予定みたいです。 (なので他の組み合わせて使うより多少不便なのかもしれない)
ただ試してみた結果現状でもとても簡単に利用できました。&lt;/p&gt;
&lt;p&gt;基本的には &lt;a href="https://letsencrypt.readthedocs.org/en/latest/intro.html"&gt;ドキュメント&lt;/a&gt; の &lt;a href="https://letsencrypt.readthedocs.org/en/latest/intro.html#installation"&gt;Installation&lt;/a&gt; と &lt;a href="https://letsencrypt.readthedocs.org/en/latest/intro.html#how-to-run-the-client"&gt;How to run the client&lt;/a&gt; の章を読めば事足りて、
あとは必要に応じて &lt;a href="https://letsencrypt.readthedocs.org/en/latest/using.html"&gt;User Guide&lt;/a&gt; も読むといいはず。&lt;/p&gt;
&lt;p&gt;まず必要なファイルはgithubからcloneするだけ、コマンドを実行したタイミングでディストリビュージョンごとに必要なパッケージが自動でインストールされるようになっていました。
Gentooの場合は &lt;code&gt;bootstrap/_gentoo_common.sh&lt;/code&gt; に書かれていて以下のパッケージがインストールされるようになっていました。
あと普通に実行するとGentooは実験的なサポートなので &lt;code&gt;--debug&lt;/code&gt; をつけて実行するように言われるのでそのようにします。
ただこれは初回のパッケージのインストール時のみ必要みたいなので、次回以降はつける必要がありませんでした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PACKAGES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dev-vcs/git&lt;/span&gt;
&lt;span class="s2"&gt;  dev-lang/python:2.7&lt;/span&gt;
&lt;span class="s2"&gt;  dev-python/virtualenv&lt;/span&gt;
&lt;span class="s2"&gt;  dev-util/dialog&lt;/span&gt;
&lt;span class="s2"&gt;  app-admin/augeas&lt;/span&gt;
&lt;span class="s2"&gt;  dev-libs/openssl&lt;/span&gt;
&lt;span class="s2"&gt;  dev-libs/libffi&lt;/span&gt;
&lt;span class="s2"&gt;  app-misc/ca-certificates&lt;/span&gt;
&lt;span class="s2"&gt;  virtual/pkgconfig&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とりあえず &lt;code&gt;--help&lt;/code&gt; を指定して起動してみると、これだけでパッケージのインストールが始まりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/letsencrypt/letsencrypt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;letsencrypt
&lt;span class="nv"&gt;$ &lt;/span&gt;./letsencrypt-auto --debug --help
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで下準備が済んだので証明書の取得ができます。
コマンドを実行するとLet's Encryptのアカウント?の取得から証明書の生成までを自動で行ってくれるみたいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;まだプラグインが対応していないNginxを使うので &lt;code&gt;certonly&lt;/code&gt; と &lt;code&gt;--standalone&lt;/code&gt; を指定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--standalone-supported-challenges tls-sni-01&lt;/code&gt; を指定する必要がありました。
僕の環境ではHTTPSしか通らないようになっているので &lt;code&gt;tls-sni-01&lt;/code&gt; を指定。
(おそらく)ドメインの存在確認のためにLet's Encryptのコマンドが80か443のポートで待ち受ける必要があるみたいです。
なのでこのコマンドは実際に使用するドメインが割り当てられているマシン、かつNginxを停止した状態で実行する必要があると思われます。
(停止しないで実行するとエラーになりました、Apacheなどの対応しているウェブサーバーの場合は停止しないで実行できるのだと思います)
詳細は &lt;a href="https://letsencrypt.readthedocs.org/en/latest/using.html#standalone"&gt;User Guide/Plugins/Standalone&lt;/a&gt; を参照&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--email&lt;/code&gt; にメールアドレスを指定。
適当なアドレスを指定できましたが、アカウントの情報を復活させるためにも使われるみたいなので連絡がつくアドレスを指定したほうがよさそうです。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; は証明書を使うドメイン名を指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際のコマンドはこのようにしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./letsencrypt-auto certonly --standalone --standalone-supported-challenges tls-sni-01 --email &amp;lt;Your email address&amp;gt; -d &amp;lt;Your domain name&amp;gt;
Updating letsencrypt and virtual environment dependencies.......
Running with virtualenv: sudo /home/admin/.local/share/letsencrypt/bin/letsencrypt certonly --standalone --standalone-supported-challenges tls-sni-01 --email &amp;lt;Your email address&amp;gt; -d &amp;lt;Your domain name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドを実行するとこのような同意画面が出るのでよく読んで同意&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/12/letsencrypt-terms.png"&gt;&lt;img alt="image" src="/static/images/2015/12/letsencrypt-terms.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後にこのようなメッセージが表示されました。
&lt;code&gt;/etc/letsencrypt&lt;/code&gt; に生成された諸々のファイルが保存されているのでバックアップするように、と書かれています。
あと証明書の有効期限は3ヶ月と短くなっているので有効期限が過ぎる前に更新する必要があります。
同じコマンドを再度実行することで更新できます。 (ただ更新時もNginxを一度停止する必要がありました。)
(&lt;a href="https://letsencrypt.readthedocs.org/en/latest/using.html#renewal"&gt;User Guide/Renewal&lt;/a&gt; を参照、ここにはcrontabに書いておくようにと記載があります)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;IMPORTANT NOTES:
 - If you lose your account credentials, you can recover through
   e-mails sent to &amp;lt;Your email address&amp;gt;.
 - Your account credentials have been saved in your Let&lt;span class="s1"&gt;&amp;#39;s Encrypt&lt;/span&gt;
&lt;span class="s1"&gt;   configuration directory at /etc/letsencrypt. You should make a&lt;/span&gt;
&lt;span class="s1"&gt;   secure backup of this folder now. This configuration directory will&lt;/span&gt;
&lt;span class="s1"&gt;   also contain certificates and private keys obtained by Let&amp;#39;&lt;/span&gt;s
   Encrypt so making regular backups of this folder is ideal.

 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/&amp;lt;Your domain name&amp;gt;/fullchain.pem. Your cert
   will expire on 2016-03-03. To obtain a new version of the
   certificate in the future, simply run Let&lt;span class="s1"&gt;&amp;#39;s Encrypt again.&lt;/span&gt;
&lt;span class="s1"&gt; - If like Let&amp;#39;&lt;/span&gt;s Encrypt, please consider supporting our work by:

   Donating to ISRG / Let&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後にNginxで生成された証明書を使うように設定します。
&lt;code&gt;/etc/letsencrypt/live/&amp;lt;Your domain name&amp;gt;/&lt;/code&gt; 以下に指定したドメインの証明書一式が保存されているので、
&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; のSSL証明書の部分を以下のように編集して再起動すればOKです。
再起動したらブラウザで接続してLet's Encryptの証明書が使われているか確認してみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssl_certificate     /etc/letsencrypt/live/&amp;lt;Your domain name&amp;gt;/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/&amp;lt;Your domain name&amp;gt;/privkey.pem;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Gentoo"></category><category term="Nginx"></category></entry><entry><title>ESP-WROOM-02を試してみた</title><link href="/posts/2015/11/esp-wroom-02.html" rel="alternate"></link><updated>2015-11-23T19:20:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-11-23:posts/2015/11/esp-wroom-02.html</id><summary type="html">&lt;p&gt;ESP-WROOM-02を試してみました。
ESP-WROOM-02はデフォルトではATコマンドで操作を受け付けるファームウェアが書き込まれています。
それ以外にArduinoやNodeMCUとして使えるファームウェアも使用することができるみたいです。&lt;/p&gt;
&lt;p&gt;今回試したのはATコマンドでの動作です。
これはPCとUSBシリアルで接続してシリアルコンソールからATコマンドを送ることで操作します。
今回使ったものは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://akizukidenshi.com/catalog/g/gK-06894/"&gt;FT231X USBシリアル変換モジュール AE-FT231X&lt;/a&gt; 750円&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akizukidenshi.com/catalog/g/gI-00432/"&gt;低損失CMOS三端子レギュレータ 3.3V 500mA NJU7223F33&lt;/a&gt; 50円&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.switch-science.com/catalog/2347/"&gt;ESP-WROOM-02ピッチ変換済みモジュール《フル版》&lt;/a&gt; 1100円&lt;/li&gt;
&lt;li&gt;その他抵抗等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;USBシリアルは今後もよく使うと思うのでこのような変換基板を作ってみました。
今回は使わないけれど、リセットボタンと5V/3Vの切り替えスイッチ付き。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/11/usb-serial.png"&gt;&lt;img alt="image" src="/static/images/2015/11/usb-serial_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記のUSBシリアル変換基板とESP-WROOM-02を次のように接続するだけで動作確認できます。
ESP-WROOM-02への電源は消費電力の問題から、USBシリアルの3.3Vは使用せず、5Vを三端子レギュレータを介して入力するようにします。
(&lt;a href="http://nemuisan.blog.bai.ne.jp/?eid=216185"&gt;ESP-WROOM-02を使ってみる3 -そんな電源で大丈夫か-&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/11/esp-wroom-02.png"&gt;&lt;img alt="image" src="/static/images/2015/11/esp-wroom-02_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/11/DSC_0565.JPG"&gt;&lt;img alt="image" src="/static/images/2015/11/DSC_0565_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次にPCとの接続にはUSBシリアルのドライバをインストールしなければいけないので、FTDIのページからVCP Driverをダウンロードしてインストールしておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ftdichip.com/Drivers/VCP.htm"&gt;Virtual COM Port Drivers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PCと接続したらArduino IDEを起動して &lt;code&gt;Tools -&amp;gt; Serial Port&lt;/code&gt; から認識されているデバイスを選択します。
選択したら &lt;code&gt;Tools -&amp;gt; Serial Monitor&lt;/code&gt; をクリックしてシリアルモニタを起動します。&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/11/Screenshot_2015-11-01-15-12-00.png"&gt;&lt;img alt="image" src="/static/images/2015/11/Screenshot_2015-11-01-15-12-00_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;シリアルモニタが起動したら &lt;code&gt;Both NL &amp;amp; CR&lt;/code&gt; 、 &lt;code&gt;115200 baud&lt;/code&gt; に設定を変更します。
&lt;code&gt;AT&lt;/code&gt; と入力して &lt;code&gt;OK&lt;/code&gt; が返ってくればモジュールの起動には成功して使用可能状態になっています。
以下の &lt;code&gt;&amp;gt;&lt;/code&gt; の行のコマンドを入力していくと、WiFiのアクセスポイントに接続し、HTTPで外部のリソースにアクセスすることができます。
(&lt;a href="http://www.pwv.co.jp/~take/TakeWiki/index.php?Arduino%E5%8B%89%E5%BC%B7%E4%BC%9A%2F0N-WiFi%E3%83%A2%E3%82%B7%E3%82%99%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%9D%E3%81%AE%EF%BC%91"&gt;Arduino勉強会/0N-WiFiモジュールその１&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; AT

OK

# Stationモードにする (APモードなどもある)
&amp;gt; AT+CWMODE=1

OK

# アクセスポイントに接続
&amp;gt; AT+CWJAP=&amp;quot;SSID&amp;quot;,&amp;quot;PASSWORD&amp;quot;

WIFI DISCONNECT
WIFI CONNECTED
WIFI GOT IP

OK

# モジュールに割り当てられているIPアドレスとMACアドレスを表示
&amp;gt; AT+CIFSR

+CIFSR:STAIP,&amp;quot;IP_ADDRESS&amp;quot;
+CIFSR:STAMAC,&amp;quot;MAC_ADDRESS&amp;quot;

OK

# サーバに接続
&amp;gt; AT+CIPSTART=&amp;quot;TCP&amp;quot;,&amp;quot;www.google.co.jp&amp;quot;,80

CONNECT

OK

# 送信するバイト数を設定、今回は `GET / HTTP/1.0` と改行2回分の18Byte
&amp;gt; AT+CIPSEND=18

OK

&amp;gt; GET / HTTP/1.0

Recv 18 bytes

SEND OK

+IPD,494:HTTP/1.0 302 Found
Cache-Control: private
Content-Type: text/html; charset=UTF-8
Location: http://www.google.co.jp/?gfe_rd=cr&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;ei=L601Vq2QHfP98wf0qZKADQ
Content-Length: 261
Date: Sun, 01 Nov 2015 06:11:59 GMT
Server: GFE/2.0

&lt;span class="nt"&gt;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html;charset=utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;TITLE&amp;gt;&lt;/span&gt;302 Moved&lt;span class="nt"&gt;&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&lt;/span&gt;302 Moved&lt;span class="nt"&gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;
The document has moved
&lt;span class="nt"&gt;&amp;lt;A&lt;/span&gt; &lt;span class="na"&gt;HREF=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.google.co.jp/?gfe_rd=cr&amp;amp;amp;ei=L601Vq2QHfP98wf0qZKADQ&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;here&lt;span class="nt"&gt;&amp;lt;/A&amp;gt;&lt;/span&gt;.
&lt;span class="nt"&gt;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;

CLOSED
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とりあえずGoogleにアクセスすることはできました。
ATコマンド経由で使用するにはシリアル経由で他のデバイスと接続する必要があり、その場合無駄に複雑になってしまいます。
せっかくESP-WROOM-02自体をArduinoとして使用できるので、そうすればとてもシンプルなシステムになるはず。
次回はこのモジュールをArduinoとして使う方法を試したいと思います。&lt;/p&gt;</summary><category term="ESP-WROOM-02"></category></entry><entry><title>WN-G300UAを使ってみる</title><link href="/posts/2015/11/wn-g300ua.html" rel="alternate"></link><updated>2015-11-01T03:30:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-11-01:posts/2015/11/wn-g300ua.html</id><summary type="html">&lt;p&gt;今までWiFiのアクセスポイントには &lt;a href="http://buffalo.jp/product/wireless-lan/client/wli-uc-gnm/"&gt;WLI-UC-GNM&lt;/a&gt; を使用していたのですが、たまにOSごと巻き込んでクラッシュするのとアンテナがないので電波が悪い部屋があったので交換してみることに&lt;br /&gt;
アンテナがついている機種でLinuxでの動作実績がありそうなものを探した結果 &lt;a href="http://www.iodata.jp/product/network/adp/wn-g300ua/"&gt;WN-G300UA&lt;/a&gt; が &lt;a href="http://itkobo-z.jp/wp/archives/432"&gt;RaspberryPiでの動作実績もあるみたい&lt;/a&gt; で良さそうだったので購入してみました&lt;br /&gt;
ちなみにWLI-UC-GNMは772円、WN-G300UAは1470円でした&lt;br /&gt;
上述の参考サイトにはモジュールのオプションでパワーマネージメントを無効にすれば普通に動くということだったのですが、これから色々ハマるとは思いもしませんでした…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このデバイス用のドライバがカーネルに含まれていますがまともに動作しませんでした (繋がるけれどすぐ切れるという動作 Kernel 3.14.48)&lt;/li&gt;
&lt;li&gt;チップセットメーカーもドライバを提供していて参考にしていたサイトではそれを使うように説明がありました&lt;br /&gt;
しかし手元のカーネルではビルドすらできませんでした&lt;br /&gt;
参考にしていたサイトはRaspberryPiを使ったサイトが多かったのですが、彼らの使用しているカーネルは古かったようです&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いろいろ検証した結果ArchLinuxのパッケージで使われているリポジトリとパッチを当てたものを使用すれば動作することがわかりました&lt;br /&gt;
Arch以外のディストリビュージョンではそのままビルドすることができないのでArchで使っているリポジトリをサブモジュールにしてMakefileとWN-G300UA用のパッチを追加したリポジトリを作成しました&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lostman-github/8192cu"&gt;8192cu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lostman-github/hostapd-rtl"&gt;hostapd-rtl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の手順でビルドすることができます&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/lostman-github/8192cu
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;8192cu
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout WN-G300UA
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule update
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; -

&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/lostman-github/hostapd-rtl
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hostapd-rtl
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout WN-G300UA
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule update
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで &lt;code&gt;8192cu/src/8192cu.ko&lt;/code&gt; と &lt;code&gt;hostapd-rtl/src/hostapd/hostapd&lt;/code&gt; がビルドされます&lt;br /&gt;
&lt;code&gt;hostapd-rtl/src/hostapd/hostapd.conf&lt;/code&gt; にWN-G300UA用の修正も含まれているので以下の部分を書き換えるだけで動作するはず&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssid&lt;/li&gt;
&lt;li&gt;wpa_passphrase&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修正したら以下のコマンドでアクセスポイントを起動します&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# insmod 8192cu/src/8192cu.ko rtw_power_mgnt=0 rtw_enusbss=1 rtw_ips_mode=1&lt;/span&gt;
&lt;span class="c"&gt;# ./hostapd-rtl/src/hostapd/hostapd -P /run/hostapd.pid -B hostapd-rtl/src/hostapd/hostapd.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今の所このドライバとhostapdの組み合わせで大きな問題は起きていませんが、稀にhostapdがおかしくなるようでアクセスポイントに接続できなくなってしまうことがあります&lt;br /&gt;
その場合はhostapdを再起動すると解消するようです (ただ面倒くさい)&lt;br /&gt;
電波の問題は解決できましたが、結局安定性に関しては以前よりはマシだがいまいち解決せずという状況です…&lt;/p&gt;</summary><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>メインの回線もmineoに移行</title><link href="/posts/2015/10/mineo-dual.html" rel="alternate"></link><updated>2015-10-24T23:00:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-10-24:posts/2015/10/mineo-dual.html</id><summary type="html">&lt;p&gt;今までauのガラケーのまま維持していたメインの回線もmineoにMNPしました&lt;br /&gt;
自分の都合でなかなか宅配を受け取れなかったのを除いてとてもスムーズに移行できたのでどれくらい時間が掛かったのかメモしておきます&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;10/15 15時頃にauから電話でMNP番号を取得&lt;/li&gt;
&lt;li&gt;10/16 23時半頃にウェブページからmineoに申し込み&lt;/li&gt;
&lt;li&gt;10/18 17時頃に手続き完了のメール&lt;/li&gt;
&lt;li&gt;10/19 SIMが到着するが受け取れず&lt;/li&gt;
&lt;li&gt;10/24 ようやくSIMを受け取りMNPの切り替え&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった感じでした、受け取れなかった期間を除けば実質4日程度で手続きが完了しました&lt;br /&gt;
その間に切り替えの30分程度以外は不通期間もないので良かったと思います&lt;br /&gt;
ただ初期費用を安くするためのエントリーパッケージの入手に2、3日追加で掛かります&lt;br /&gt;
設定の手順が書いてある冊子がSIMに同梱されていて必要な情報は基本それに記載されていましたが、mineoのメールサーバーの設定はIMAPを推奨しているようでその設定のみが記載されていました&lt;br /&gt;
Gmailからメールを見たい場合はPOPを使う必要があって使えないのかと思いましたが、mineoのサイトに別途情報がありました  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://support.mineo.jp/usqa/set/initset/mail/4208847_8870.html"&gt;POP3で設定できますか？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このSIMは買い増したSO-02Gに挿して使っているのですが、以下のコマンドを実行することでドコモのスマホのテザリングのAPN制限が回避できました&lt;br /&gt;
(&lt;a href="http://app-roid.com/blog-entry-1498.html"&gt;ドコモ版XPERIA Z3（SO-01G）でMVNOのIIJmioでテザリングを有効化させる手順&lt;/a&gt;)&lt;br /&gt;
ただアップデート時にリセットされたり変更できなくなる可能性もあると思われるのでアップデートには注意したほうがいいかもしれない&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb shell settings put global tether_dun_required 0
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Android"></category><category term="SO-02G"></category><category term="MVNO"></category></entry><entry><title>mineoのドコモプランを契約してみました</title><link href="/posts/2015/09/mineo.html" rel="alternate"></link><updated>2015-09-14T23:00:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-09-14:posts/2015/09/mineo.html</id><summary type="html">&lt;p&gt;&lt;a href="/static/images/2015/09/DSC_0380.JPG"&gt;&lt;img alt="image" src="/static/images/2015/09/DSC_0380_s.JPG" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/09/DSC_0401.JPG"&gt;&lt;img alt="image" src="/static/images/2015/09/DSC_0401_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mineo.jp/"&gt;mineo&lt;/a&gt; のドコモプランの先行予約をすることができたので契約してみました&lt;br /&gt;
今回契約したのはシングルタイプ(データ専用)&lt;br /&gt;
キャンペーンで6ヶ月800円割引、先行予約で更に3ヶ月800円割引になるので&lt;br /&gt;
シングルの1GBのプラン(800円)であれば初期費用がかかるのと、その後9ヶ月はユニバーサルサービス料の負担だけで利用できる&lt;br /&gt;
更に特に最低利用期間を設けていないということなので9ヶ月後に解約することも可能&lt;/p&gt;
&lt;p&gt;初期費用は通常3000円掛かるが、エントリーパッケージを予め購入しておくと多少安く済ませることができるみたいで&lt;br /&gt;
&lt;a href="http://www.amazon.co.jp/dp/B00UT26M0Q"&gt;Amazon&lt;/a&gt; や、 &lt;a href="http://www.yodobashi.com/%E3%82%B1%E3%82%A4%E3%83%BB%E3%82%AA%E3%83%97%E3%83%86%E3%82%A3%E3%82%B3%E3%83%A0-K-OPTI-COM-mineo-%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%BC%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/pd/100000001002612616/"&gt;ヨドバシ&lt;/a&gt; で1600-1700円程度で購入できる&lt;br /&gt;
コードが記載された紙が入っているので契約時に入力すると初期費用が請求されなくなるという仕組み&lt;br /&gt;
多少手間だけれど特に急いでいるわけでもないので安く済ませられるためこちらを利用してみた&lt;/p&gt;
&lt;p&gt;9日の深夜に手続きをして、11日に手続き完了のメール、14日にSIMが到着した&lt;br /&gt;
サービス開始から間もないので参考にならないかもしれないけれど一応スピードテストをしてみた&lt;br /&gt;
自宅付近と、オフィス付近の結果はこのような感じで今のところ快調の模様&lt;br /&gt;
このままの速度が維持されるのであれば(難しいと思うけど)、メインに使っている音声有りの回線もMNPしてもいいかもと思ってる&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/09/Screenshot_2015-09-14-11-57-12.png"&gt;&lt;img alt="image" src="/static/images/2015/09/Screenshot_2015-09-14-11-57-12_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/09/Screenshot_2015-09-14-12-45-23.png"&gt;&lt;img alt="image" src="/static/images/2015/09/Screenshot_2015-09-14-12-45-23_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="MVNO"></category></entry><entry><title>デバイスからAPKを抜き出す</title><link href="/posts/2015/07/adb-apk.html" rel="alternate"></link><updated>2015-07-19T18:54:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-07-19:posts/2015/07/adb-apk.html</id><summary type="html">&lt;p&gt;&lt;a href="/static/images/2015/07/so-02g.jpg"&gt;&lt;img alt="image" src="/static/images/2015/07/so-02g_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SO-02Gのオレンジを買い増しました&lt;br /&gt;
既に持っている白と同じアプリをインストールしようとしたのですが一部のアプリがストアから削除されていたので&lt;br /&gt;
adb コマンドを使って apk を取り出してみました (色々便利なアプリがあるのは知ってる&lt;/p&gt;
&lt;p&gt;インストールされているパッケージの一覧を表示&lt;br /&gt;
全てのパッケージの apk のパスとパッケージ名が出力される&lt;br /&gt;
(適当に grep して絞り込むといいと思う)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb shell pm list package -f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;apk をデバイスからローカルへコピーする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb pull &amp;lt;device apk path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストール済みのパッケージを削除&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb shell pm uninstall &amp;lt;package name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルの apk をデバイスへインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb install &amp;lt;&lt;span class="nb"&gt;local &lt;/span&gt;apk path&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Android"></category><category term="SO-02G"></category></entry><entry><title>Xvfb上でChromeを動かしてみた</title><link href="/posts/2015/06/xvfb.html" rel="alternate"></link><updated>2015-06-14T00:35:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-06-14:posts/2015/06/xvfb.html</id><summary type="html">&lt;p&gt;外出中にFlashを使ったサイトをチェックしたいという要望が某所から出てきたので環境を作ってみた&lt;br /&gt;
普段から PC を持ち歩いている人には必要ないことかもしれないけれど普通の人は持ち歩いていないよね&lt;br /&gt;
私も荷物を持つのが嫌いなのでポケットに入るスマホと財布くらいしか持ち歩いていないです&lt;br /&gt;
ということで、スマホで見れるといいけれど Android の Firefox で使える Flash はもうサポートが切れているのでいまいちな感じ&lt;br /&gt;
で、自宅には常時起動のマシンがあるのでそこで何か用意できないかなと考えて今回 Xvfb を試してみた&lt;/p&gt;
&lt;p&gt;Xvfb はなにかというと通常 X はクライアントからの要求を受けてドライバを経由して実際のモニタに描画するのに対し、&lt;br /&gt;
モニタでなくメモリ上に確保した仮想のフレームバッファに画面を描画します&lt;br /&gt;
このため画面がないマシンでも GUI のアプリケーションが起動できます&lt;br /&gt;
サーバ上で GUI のアプリを動かすにはうってつけですね&lt;br /&gt;
ただこのままだと外部から描画された画面を見ることができないので&lt;br /&gt;
x11vnc を使って外部から画面の様子をVNCクライアントを使って見れるようにしました&lt;br /&gt;
Chrome を選択したのは Flash を動かすのに追加でプラグインが必要ないためってだけ&lt;/p&gt;
&lt;p&gt;必要なものをインストールする前に package.use に必要は USE フラグを追加して&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app-text/ghostscript-gpl cups
media-fonts/ja-ipafonts X
net-libs/libvncserver threads
net-misc/tigervnc -opengl server
x11-base/xorg-server minimal -xorg xvfb
x11-libs/cairo X
x11-libs/gdk-pixbuf X
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下をインストール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;media-fonts/ja-ipafonts&lt;/li&gt;
&lt;li&gt;www-client/google-chrome&lt;/li&gt;
&lt;li&gt;x11-base/xorg-server&lt;/li&gt;
&lt;li&gt;x11-misc/x11vnc&lt;/li&gt;
&lt;li&gt;x11-misc/xdotool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本語のフォントが必要なので media-fonts/ja-ipafonts を入れているのと、
ウインドウの操作をコマンドから行うために x11-misc/xdotool もインストールしている&lt;/p&gt;
&lt;p&gt;最終的なスクリプトはこんな感じになった&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh -x&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;:0

&lt;span class="nv"&gt;WIDTH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1280
&lt;span class="nv"&gt;HEIGHT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;670
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hoge
&lt;span class="c"&gt;#SCALE=&amp;quot;&amp;quot; &lt;/span&gt;
&lt;span class="nv"&gt;SCALE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-scale 1/2&amp;quot;&lt;/span&gt; 
&lt;span class="c"&gt;#SCALE=&amp;quot;-scale 3/4&amp;quot; &lt;/span&gt;
&lt;span class="c"&gt;#SCALE=&amp;quot;-scale 4/5&amp;quot;&lt;/span&gt;

Xvfb &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -screen &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WIDTH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;x&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;x16 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="nv"&gt;xvfb_pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$!&lt;/span&gt;

sleep 2

&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ja_JP.utf8 google-chrome-stable --start-fullscreen &lt;span class="s2"&gt;&amp;quot;http://awesome.website.com&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;sleep 10&lt;span class="p"&gt;;&lt;/span&gt; xdotool search --onlyvisible -name chrome windowmove &lt;span class="m"&gt;0&lt;/span&gt; 0&lt;span class="p"&gt;;&lt;/span&gt; xdotool search --onlyvisible -name chrome windowsize &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WIDTH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;

x11vnc -display &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -forever &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCALE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -passwd &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

xdotool search --onlyvisible -name chrome windowkill

sleep 2

&lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="nv"&gt;$xvfb_pid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Xvfb はスマホの画面で使用できる領域と同じにしておく (今回はステータスバーのサイズを考慮して 1280x670 だった&lt;/li&gt;
&lt;li&gt;Chrome のオプションは &lt;a href="http://chrome.half-moon.org/43.html"&gt;このページ&lt;/a&gt; にまとまっている&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--start-fullscreen&lt;/code&gt; のオプションを指定しても画面的にはフルスクリーンになるけれど&lt;br /&gt;
使用可能領域全体を使ってくれなかった、そのため xdotool を使った&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xdotool&lt;ul&gt;
&lt;li&gt;Chrome のウインドウを探して左上へ移動、画面のサイズに合わせてウインドウのサイズを変更&lt;br /&gt;
x11vnc サーバが終了したら Chrome のウインドウも閉じる、という操作を担当&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;x11vnc&lt;ul&gt;
&lt;li&gt;クライアントが切断しても再接続できるように &lt;code&gt;-forever&lt;/code&gt; を指定&lt;/li&gt;
&lt;li&gt;通信量を節約するために &lt;code&gt;-scale&lt;/code&gt; も指定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上でサーバ側の設定は終わり&lt;br /&gt;
スマホから VNC でつなぐにはこのサーバへ外部から接続できるようになっている必要がある&lt;br /&gt;
本当は VPN などを用意するのだろうけれど、今回は SSH のポートフォワードの機能を使った&lt;/p&gt;
&lt;p&gt;Android 側は &lt;a href="https://play.google.com/store/apps/details?id=org.connectbot&amp;amp;hl=ja"&gt;ConnectBot&lt;/a&gt; を使ってサーバへ接続する&lt;br /&gt;
この際ローカルの 5900 をサーバの 5900 へフォワードするように設定しておく&lt;br /&gt;
そして &lt;a href="https://play.google.com/store/apps/details?id=com.realvnc.viewer.android&amp;amp;hl=ja"&gt;VNC Viewer&lt;/a&gt; でローカルの 5900 に接続する&lt;br /&gt;
この VNC クライアントは自動で画面を端末のサイズに合わせて拡大するので&lt;br /&gt;
-scale オプションを使用して 1/2 に縮小していても端末の画面いっぱいに描画してくれる (ただし画質は落ちる&lt;/p&gt;</summary><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>SketchUpをLinuxにインストール</title><link href="/posts/2015/06/sketchup-wine.html" rel="alternate"></link><updated>2015-06-06T01:51:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-06-06:posts/2015/06/sketchup-wine.html</id><summary type="html">&lt;p&gt;SketchUp を Mac にインストールして使用していたのですが、 Mac のタッチパッドだといまいち操作性が良くありませんでした&lt;br /&gt;
大画面でマウスを使って操作したかったのでデスクトップの Linux マシンにインストールしてみました&lt;br /&gt;
SketchUp は Linux 版が提供されていないので Wine を使用することになります (公式の FAQ にもしれっと記述があった&lt;br /&gt;
&lt;a href="https://www.winehq.org/"&gt;WineHQ&lt;/a&gt; にも &lt;a href="http://wiki.winehq.org/Sketchup"&gt;SketchUpのWikiページ&lt;/a&gt; があり情報がまとめられています&lt;br /&gt;
ただ多少ハマった部分があったのでやったことを残しておく&lt;/p&gt;
&lt;p&gt;まず &lt;a href="http://www.sketchup.com/ja/download"&gt;公式サイト&lt;/a&gt; からインストーラを入手する&lt;br /&gt;
自分がダウンロードしたのは &lt;code&gt;SketchUpMake-ja-x64.exe&lt;/code&gt; だった&lt;br /&gt;
インストール後にバージョンを確認したら &lt;code&gt;15.3.331 64ビット&lt;/code&gt; となっていた&lt;/p&gt;
&lt;p&gt;デフォルトの &lt;code&gt;Windows XP&lt;/code&gt; だとバージョンチェックで起動できないので &lt;code&gt;winecfg&lt;/code&gt; を起動して &lt;code&gt;Windows 7&lt;/code&gt; へ変更する&lt;br /&gt;
インストールするディレクトリを変えたい場合は &lt;code&gt;WINEPREFIX&lt;/code&gt; 環境変数を使ってwine関係のコマンドを実行する&lt;br /&gt;
(デフォルトでは &lt;code&gt;~/.wine&lt;/code&gt; が使われる)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/winedir/sketchup winecfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にインストーラを起動してインストールする&lt;br /&gt;
Wine の USE フラグに &lt;code&gt;X abi_x86_64 fontconfig jpeg mono opengl png ssl truetype xcomposite&lt;/code&gt; を追加しておいた&lt;br /&gt;
インストーラの起動も winecfg と同様に WINEPREFIX を使って起動する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/winedir/sketchup wine64 SketchUpMake-ja-x64.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでインストーラが起動するはずだけれど手元の環境ではフォントのサイズが極端に大きくなっていて&lt;br /&gt;
画面のレイアウトが操作できないレベルで崩れていた&lt;br /&gt;
タブを4回、スペースを1回押すことでインストールを続行できた&lt;/p&gt;
&lt;p&gt;インストールができて起動してみると &lt;code&gt;mfc100u.dll&lt;/code&gt; が必要であるというエラーがでて起動できない&lt;br /&gt;
mfc100u.dll は Visual C++ の再頒布可能パッケージに含まれているのでそれを入手する必要がある&lt;br /&gt;
mfc100u.dll は &lt;a href="http://www.wdic.org/w/TECH/Visual%20C%2B%2B%20%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA"&gt;このサイト&lt;/a&gt; によると &lt;a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=14632"&gt;Visual C++ 2010&lt;/a&gt; または &lt;a href="http://www.microsoft.com/ja-jp/download/details.aspx?id=30679"&gt;Visual Studio 2012&lt;/a&gt; に含まれている&lt;br /&gt;
今回は 2010 の方を使用した&lt;/p&gt;
&lt;p&gt;Microsoft のサイトへ行くと &lt;code&gt;vcredist_x64.exe&lt;/code&gt; を入手することができる&lt;br /&gt;
このファイルを実行して展開する必要があるのだけれど、どうしても Wine を使ってはうまくできなかったので&lt;br /&gt;
仕方なく Windows のマシンを使用して展開した&lt;br /&gt;
Windows のコマンドプロンプトで &lt;code&gt;/x:c:\target\dir&lt;/code&gt; のようにオプションを指定しすると&lt;br /&gt;
指定したディレクトリへ中身を展開することができた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; vcredist_x64.exe /x:c:\target\dir
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;展開したファイルの中に &lt;code&gt;vc_red.cab&lt;/code&gt; というファイルがあるので&lt;br /&gt;
それを更に展開すると &lt;code&gt;F_CENTRAL_mfc100u_x64&lt;/code&gt; をいうファイルを入手することができる&lt;br /&gt;
Linux で展開する場合は &lt;code&gt;cabextract&lt;/code&gt; コマンドが利用できる&lt;br /&gt;
&lt;code&gt;F_CENTRAL_mfc100u_x64&lt;/code&gt; を Linux の環境へコピーしたら &lt;code&gt;system32&lt;/code&gt; へ mfc100u.dll というファイル名でコピーする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cp F_CENTRAL_mfc100u_x64 drive_c/windows/system32/mfc100u.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上で基本的な作業は終了&lt;/p&gt;
&lt;p&gt;これ以外の細かい設定は、 SketchUp を起動するには実行するユーザが &lt;code&gt;video&lt;/code&gt; グループに所属していることと&lt;br /&gt;
実行時のオプションに &lt;code&gt;/DisableRubyAPI&lt;/code&gt; が必要だった&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;libGL error: failed to open drm device: Permission denied
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;が起きる場合、実行するユーザがvideoグループに所属していない&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;libGL error: unable to load driver: i965_dri.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;が起きる場合、 &lt;code&gt;media-libs/mesa&lt;/code&gt; で &lt;code&gt;classic&lt;/code&gt; USE フラグが有効になっていないので&lt;br /&gt;
&lt;code&gt;/usr/lib/dri/i965_dri.so&lt;/code&gt; が存在しない&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ntdll&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;RtlpWaitForCriticalSection&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="mh"&gt;0x2c8b8&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt; &lt;span class="n"&gt;timed&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="mi"&gt;0009&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocked&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;retrying&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;が起きる場合、コマンドラインオプションに /DisableRubyAPI をつけていない&lt;/p&gt;
&lt;p&gt;最終的に以下のコマンドで正常に SketchUp を起動することができた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/winedir/sketchup wine64 &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/winedir/sketchup/drive_c/Program Files (x86)/SketchUp/SketchUp 2015/SketchUp.exe&amp;quot;&lt;/span&gt; /DisableRubyAPI
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category></entry><entry><title>ATmega328を取り外して動作させる</title><link href="/posts/2015/04/atmega328.html" rel="alternate"></link><updated>2015-04-26T23:22:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-04-26:posts/2015/04/atmega328.html</id><summary type="html">&lt;p&gt;Arduino Uno を使って動作確認をした回路をなにかのケースに組み込んで使いたいときに&lt;br /&gt;
Arduino をそのまま組み込むのは大きすぎるし、高いしあまり現実的ではないので&lt;br /&gt;
Arduino に使われている &lt;a href="http://akizukidenshi.com/catalog/g/gI-03142/"&gt;ATmega328&lt;/a&gt; を取り外して単体で使えることを確認してみた  &lt;/p&gt;
&lt;p&gt;まず購入直後の ATmega328 には Arduino として動作させるためのブートローダが書き込まれていないので&lt;br /&gt;
Arduino Uno を使ってブートローダの書き込みをしなければいけない&lt;br /&gt;
Arduino に搭載されている ATmega328 は 16MHz / 5V で動作しているが、これには外部クロックが必要&lt;br /&gt;
それ以外に ATmega328 の内部に搭載されている 8MHz のクロックを使う方法がある&lt;br /&gt;
これを使う場合、部品点数が少なくなるし、 5V もしくは 3.3V で動作させることができる&lt;br /&gt;
今回は速度は必要ではないしそれで十分なので簡単な 8MHz / 5V を選択&lt;br /&gt;
その場合ブレッドボード等は既に持っているので追加で必要なものは ATmega328 と 10μF のコンデンサだけ&lt;/p&gt;
&lt;p&gt;参考にすべきページは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.arduino.cc/en/Tutorial/ArduinoISP"&gt;ArduinoISP&lt;/a&gt; の &lt;code&gt;Instructions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.arduino.cc/en/Tutorial/ArduinoToBreadboard"&gt;ArduinoToBreadboard&lt;/a&gt; の &lt;code&gt;Minimal Circuit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で、前者にはおおまかな手順、後者には回路図が載っている&lt;br /&gt;
ただ、 &lt;code&gt;Instructions&lt;/code&gt; の方に書いてあるが、この回路図のままだと Arduino Uno では動かないので注意&lt;br /&gt;
実際には回路図に加えて &lt;code&gt;RESET&lt;/code&gt; と &lt;code&gt;GND&lt;/code&gt; の間にコンデンサを接続する必要がある&lt;br /&gt;
(できれば回路図の方に注意書きを加えておいて欲しかったなぁ)&lt;/p&gt;
&lt;p&gt;Arduino Uno と ATmega328 の接続は回路図のままでこのようにする&lt;br /&gt;
コンデンサはあとから無理やり付けたので適当だけれど気にしない&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arduino Uno&lt;/th&gt;
&lt;th&gt;ATmega328&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これで回路は完成&lt;br /&gt;
&lt;a href="/static/images/2015/04/DSC_0107.JPG"&gt;&lt;img alt="image" src="/static/images/2015/04/DSC_0107_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arduino IDE の準備&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.arduino.cc/en/Tutorial/ArduinoToBreadboard"&gt;ArduinoToBreadboard&lt;/a&gt; のページから &lt;code&gt;Breadboard1-0-x.zip&lt;/code&gt; または &lt;code&gt;Breadboard1-5-x.zip&lt;/code&gt; をダウンロードする&lt;br /&gt;
(インストール済みの IDE が 1.0.6 だったので今回は &lt;code&gt;Breadboard1-0-x.zip&lt;/code&gt; を使用)&lt;/li&gt;
&lt;li&gt;zip を解凍して出てくる &lt;code&gt;breadboard&lt;/code&gt; ディレクトリを &lt;code&gt;~/Documents/Arduino/hardware/&lt;/code&gt; 以下に配置&lt;br /&gt;
(場所は &lt;code&gt;Arduino&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Sketchbook location&lt;/code&gt; で確認できる)&lt;/li&gt;
&lt;li&gt;Arduino IDE を再起動すると &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Board&lt;/code&gt; に &lt;code&gt;ATmega328 on a breadboard (8 MHz internal clock)&lt;/code&gt; が追加される&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Arduino Uno の準備&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Examples&lt;/code&gt; -&amp;gt; &lt;code&gt;ArduinoISP&lt;/code&gt; を選択してスケッチを開く&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Board&lt;/code&gt; が &lt;code&gt;Arduino Uno&lt;/code&gt; になっていることを確認してから &lt;code&gt;Upload&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで Arduino Uno を使ってブートローダを書き込むことができる&lt;br /&gt;
ブートローダの書き込みは&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Board&lt;/code&gt; が &lt;code&gt;ATmega328 on a breadboard (8 MHz internal clock)&lt;/code&gt; になっていることを確認&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Programmer&lt;/code&gt; が &lt;code&gt;Arduono as ISP&lt;/code&gt; になっていることを確認&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Burn Bootloader&lt;/code&gt; で書き込み&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで ATmega328 を Arduino として動作させることができる&lt;br /&gt;
実際にスケッチを書き込んで動作させるためには、また別の回路に接続しなおす必要がある&lt;br /&gt;
回路図のページの &lt;code&gt;Uploading sketches to an ATmega on a breadboard&lt;/code&gt; の図を参考にして以下のようにする&lt;br /&gt;
この際 Arduino Uno に元から搭載されている ATmega328 は取り外しておく&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arduino Uno&lt;/th&gt;
&lt;th&gt;ATmega328&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RESET&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;実際にサンプルの Blink を書き込んで動作を確認してみる&lt;br /&gt;
上記の回路に加えて ATmega328 の 19 番に LED を接続しておく&lt;br /&gt;
Arduino Uno のピンに対応する ATmega328 のピン番号は &lt;a href="http://www.arduino.cc/en/Hacking/PinMapping168"&gt;ATmega168/328-Arduino Pin Mapping&lt;/a&gt; に記載されている&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Examples&lt;/code&gt; -&amp;gt; &lt;code&gt;01.Basics&lt;/code&gt; -&amp;gt; &lt;code&gt;Blink&lt;/code&gt; を選択してスケッチを開く&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;Board&lt;/code&gt; が &lt;code&gt;ATmega328 on a breadboard (8 MHz internal clock)&lt;/code&gt; になっていることを確認してから &lt;code&gt;Upload&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="/static/images/2015/04/DSC_0111.JPG"&gt;&lt;img alt="image" src="/static/images/2015/04/DSC_0111_s.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上で動作確認は終了&lt;br /&gt;
ブートローダの書き込みと、スケッチの書き込みで回路を繋ぎ変えたりしなければいけないので結構面倒だった&lt;br /&gt;
ブートローダは Arduino Uno に載せる書き込み用のシールドを作っておくと便利だろう&lt;br /&gt;
スケッチの書き込みは多分シリアルがつながればいいのでUSBシリアルを載せた基板を用意しておくといいのかもしれない&lt;/p&gt;</summary><category term="Arduino"></category><category term="ATmega328"></category></entry><entry><title>ibusからuim-mozcへ移行</title><link href="/posts/2015/04/uin-mozc.html" rel="alternate"></link><updated>2015-04-23T02:08:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-04-23:posts/2015/04/uin-mozc.html</id><summary type="html">&lt;p&gt;一時期 ibus が色々話題になりましたね &lt;a href="http://cpplover.blogspot.jp/2013/10/ibus-15.html"&gt;*1&lt;/a&gt; &lt;a href="http://www.kaoriya.net/blog/2013/10/18/"&gt;*2&lt;/a&gt;&lt;br /&gt;
僕の環境では ibus-mozc を使っていたのですが、 1.5 系へは移行せず 1.4 系にとどまっていました&lt;br /&gt;
このまま放置していてもよかったんだけれど、 Gentoo のリポジトリから 1.4 が&lt;br /&gt;
なくなっていることに気がついたので別のインプットメソッドへ移行することにしました&lt;/p&gt;
&lt;p&gt;Linux でのインプットメソッドで代表的なものは ibus 、 uim 、 fcitx といくつかあるけれど&lt;br /&gt;
Mac で MacUIM を使っているので Linux のマシンでも uim を使うことにしました&lt;br /&gt;
ただ Gentoo の公式リポジトリのパッケージでは mozc を uim と組み合わせることができないみたいだったので&lt;br /&gt;
自分で ebuild を書くか、他の人が書いたものを使わせてもらうかのどちらかがあるみたいです&lt;br /&gt;
今回は &lt;a href="https://bitbucket.org/wjn/wjn-overlay"&gt;wjn-overlay&lt;/a&gt; を使わせてもらうことにしました&lt;/p&gt;
&lt;p&gt;ここ &lt;a href="https://wiki.gentoo.org/wiki/Overlay/ja"&gt;https://wiki.gentoo.org/wiki/Overlay/ja&lt;/a&gt; に書いてあるのですが crossdev を使っている場合は&lt;br /&gt;
既に /usr/local/portage が存在するので移動しておくか別の場所を使う必要があるみたいです&lt;br /&gt;
自分の場合は crossdev を使っているので既にディレクトリが存在しました&lt;br /&gt;
なので別の場所へ移動しておきます&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# mv /usr/local/portage /usr/local/portage-crossdev&lt;/span&gt;
&lt;span class="c"&gt;# echo local-crossdev &amp;gt; /usr/local/portage-crossdev/profiles/repo_name&lt;/span&gt;
&lt;span class="c"&gt;# mkdir /usr/local/portage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;wjn-overlay を /usr/local/portage/wjn-overlay に clone します&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# git clone https://bitbucket.org/wjn/wjn-overlay.git /usr/local/portage/wjn-overlay&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後に make.conf に登録すれば使えるようになります&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PORTDIR_OVERLAY=&amp;quot;/usr/local/portage-crossdev /usr/local/portage/wjn-overlay&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;equery で確認すると uim のフラグが使えるようになっているはずです&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;equery u mozc
&lt;span class="o"&gt;[&lt;/span&gt; Legend : U - final flag setting &lt;span class="k"&gt;for&lt;/span&gt; installation&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;        : I - package is installed with flag     &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; Colors : &lt;span class="nb"&gt;set&lt;/span&gt;, &lt;span class="nb"&gt;unset&lt;/span&gt;                             &lt;span class="o"&gt;]&lt;/span&gt;
 * Found these USE flags &lt;span class="k"&gt;for&lt;/span&gt; app-i18n/mozc-2.16.2068.102:
 U I
 - - emacs                    : Enable support &lt;span class="k"&gt;for&lt;/span&gt; virtual/emacs
 - - fcitx                    : Enable support &lt;span class="k"&gt;for&lt;/span&gt; app-i18n/fcitx
 - - ibus                     : Enable support &lt;span class="k"&gt;for&lt;/span&gt; app-i18n/ibus
 + + python_targets_python2_7 : Build with Python 2.7
 + + qt4                      : Add support &lt;span class="k"&gt;for&lt;/span&gt; the Qt GUI/Application Toolkit version 4.x
 - - renderer                 : Enable native candidate window
 - - &lt;span class="nb"&gt;test&lt;/span&gt;                     : Enable src_test phase &lt;span class="k"&gt;for&lt;/span&gt; runtests
 + + uim                      : Enable support &lt;span class="k"&gt;for&lt;/span&gt; app-i18n/uim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いつも通り emerge してインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# emerge -av mozc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストール後は &lt;a href="https://bitbucket.org/wjn/wjn-overlay/wiki/Mozc-ebuild-%E3%83%98%E3%83%AB%E3%83%97-%28JA%29"&gt;ここ&lt;/a&gt; に書いてあるように&lt;br /&gt;
ibus を終了してから XMODIFIERS 等をエクスポートして uim を起動すれば使えるようになるはず&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;XMODIFIERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@im=uim&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;uim
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;uim
&lt;span class="nv"&gt;$ &lt;/span&gt;uim-xim &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;uim-toolbar-gtk-systray &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;その他にウインドウマネージャによってはシステムトレイのアイコンがおかしくなったりするので &lt;a href="https://archlinuxjp.kusakata.com/wiki/uim_%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%85%A5%E5%8A%9B#uim-toolbar-gtk-systray:_.E3.83.88.E3.83.AC.E3.82.A4.E3.82.A2.E3.82.A4.E3.82.B3.E3.83.B3.E3.81.8C.E3.81.A4.E3.81.B6.E3.82.8C.E3.81.A6.E3.81.BE.E3.81.99"&gt;ここ&lt;/a&gt; を参考に設定を変更する&lt;br /&gt;
実際に変更した設定は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;全体設定 → 入力方式の利用準備 → 標準の入力方式&lt;/code&gt; を &lt;code&gt;Mozc&lt;/code&gt; に&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ツールバー → 入力方式切り替えメニュー&lt;/code&gt; のチェックボックスを &lt;code&gt;オフ&lt;/code&gt; に&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ツールバー → ボタン&lt;/code&gt; のチェックボックスを &lt;code&gt;全てオフ&lt;/code&gt; に&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ツールバー → 濃色背景向けアイコンを使用する&lt;/code&gt; のチェックボックスを &lt;code&gt;オン&lt;/code&gt; に&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mozc → ツールバー → 有効にするボタン&lt;/code&gt; を &lt;code&gt;入力モード&lt;/code&gt; のみに編集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mozc → 特殊操作 → vi協調モードを有効にする&lt;/code&gt; のチェックボックスを &lt;code&gt;オン&lt;/code&gt; に&lt;/li&gt;
&lt;/ul&gt;</summary><category term="uim"></category><category term="Mozc"></category><category term="Gentoo"></category></entry><entry><title>SO-02Gの設定色々</title><link href="/posts/2015/03/so-02g_settings.html" rel="alternate"></link><updated>2015-03-23T01:08:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-03-23:posts/2015/03/so-02g_settings.html</id><summary type="html">&lt;p&gt;SO-02Gを使い始めてから変更した設定まとめ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0001docomoに勝手に接続してしまう (&lt;a href="http://mikkagashi.cocolog-nifty.com/kasukadari/2013/12/iphonewi-fioff-.html"&gt;ドコモのiPhoneが公衆Wi-Fi APに自動接続しててドッキリ&lt;/a&gt;)&lt;br /&gt;
このSSIDはドコモのWiFiなんですね、地下鉄の駅でふと携帯を見たらつながっていたのでびっくりしました&lt;br /&gt;
接続された状態でWiFiの設定を開いて0001docomoを長押しして切断すれば次回からは自動で接続されなくなるみたいです&lt;br /&gt;
しかし気持ち悪いですね&lt;/li&gt;
&lt;li&gt;ドコモアプリのアップデート通知を切る (&lt;a href="http://xperiaz.kurosuke.biz/archives/625"&gt;ドコモアプリのアップデート通知をオフにする方法&lt;/a&gt;)&lt;br /&gt;
設定→ドコモのサービス/クラウド→ドコモアプリ管理→定期アップデート確認&lt;/li&gt;
&lt;li&gt;OSの自動更新の無効化 (夜中に自動で実行されるみたいです)&lt;br /&gt;
設定→端末情報→ソフトウェア更新→ソフトウェア更新設定の変更&lt;/li&gt;
&lt;li&gt;Sonyアプリの自動更新の無効化&lt;br /&gt;
設定→端末情報→アプリケーション更新→右上のメニュー→設定&lt;/li&gt;
&lt;li&gt;ひつじの停止&lt;br /&gt;
ホーム画面のひつじを長押し→キャラ表示 と 吹き出し表示 を 表示しない へ変更&lt;/li&gt;
&lt;li&gt;プリインアプリの無効化&lt;br /&gt;
(&lt;a href="http://xperia-freaks.org/2014/12/14/so02g-disable/"&gt;【Z3 Compact】非rootで無効化して問題ないアプリ・サービス一覧(SO-02G版)&lt;/a&gt;)&lt;br /&gt;
(&lt;a href="http://usedoor.jp/howto/digital/android-smartphone/preinstall-mukouka-ichiran/"&gt;【Androidスマホ】プリインストールアプリの無効化・停止・アンインストール対応一覧表&lt;/a&gt;)&lt;br /&gt;
サイトを参考に適当に、今のところ無効化しているのは以下&lt;ul&gt;
&lt;li&gt;ウィキペディアプラグイン&lt;/li&gt;
&lt;li&gt;エリアメール&lt;/li&gt;
&lt;li&gt;エリア連動Wi-Fi&lt;/li&gt;
&lt;li&gt;オートGPS&lt;/li&gt;
&lt;li&gt;おサイフケータイアプリセットアップ&lt;/li&gt;
&lt;li&gt;おサイフケータイ 設定アプリ&lt;/li&gt;
&lt;li&gt;おサイフケータイ Webプラグインセットアップ&lt;/li&gt;
&lt;li&gt;オレンジ&lt;/li&gt;
&lt;li&gt;クラウドプリント&lt;/li&gt;
&lt;li&gt;クリエイティブ エフェクト&lt;/li&gt;
&lt;li&gt;サウンドビジュアル壁紙&lt;/li&gt;
&lt;li&gt;しゃべって検索&lt;/li&gt;
&lt;li&gt;スケジュール/メモ・トルカの同期&lt;/li&gt;
&lt;li&gt;スケジュール&amp;amp;メモ&lt;/li&gt;
&lt;li&gt;スケッチ&lt;/li&gt;
&lt;li&gt;スマートコネクト&lt;/li&gt;
&lt;li&gt;セットアップウィザード&lt;/li&gt;
&lt;li&gt;セットアップガイド&lt;/li&gt;
&lt;li&gt;タイムシフト 連写&lt;/li&gt;
&lt;li&gt;ドコモクラウド設定&lt;/li&gt;
&lt;li&gt;ドコモサービス&lt;/li&gt;
&lt;li&gt;ドコモバックアップ&lt;/li&gt;
&lt;li&gt;ドコモ音声入力&lt;/li&gt;
&lt;li&gt;ドコモ文字編集&lt;/li&gt;
&lt;li&gt;バブル&lt;/li&gt;
&lt;li&gt;フェイスアンロック&lt;/li&gt;
&lt;li&gt;フェイスイン ピクチャー&lt;/li&gt;
&lt;li&gt;フェーズビーム&lt;/li&gt;
&lt;li&gt;フォトスクリーンセーバー&lt;/li&gt;
&lt;li&gt;フォトスライドショー&lt;/li&gt;
&lt;li&gt;ブラックホール&lt;/li&gt;
&lt;li&gt;マジックスモーク壁紙&lt;/li&gt;
&lt;li&gt;マルチカメラ&lt;/li&gt;
&lt;li&gt;モバイルFeliCaクライアント&lt;/li&gt;
&lt;li&gt;印刷スプーラ&lt;/li&gt;
&lt;li&gt;災害用キット&lt;/li&gt;
&lt;li&gt;紫&lt;/li&gt;
&lt;li&gt;声の宅配便&lt;/li&gt;
&lt;li&gt;青&lt;/li&gt;
&lt;li&gt;赤&lt;/li&gt;
&lt;li&gt;端末エラー情報送信&lt;/li&gt;
&lt;li&gt;電話帳サービス&lt;/li&gt;
&lt;li&gt;白&lt;/li&gt;
&lt;li&gt;魔法の森&lt;/li&gt;
&lt;li&gt;緑&lt;/li&gt;
&lt;li&gt;ARエフェクト&lt;/li&gt;
&lt;li&gt;ARファン&lt;/li&gt;
&lt;li&gt;dメニュー&lt;/li&gt;
&lt;li&gt;DOCOMO Initialization&lt;/li&gt;
&lt;li&gt;Gガイド 番組表DL&lt;/li&gt;
&lt;li&gt;Google Play ゲーム&lt;/li&gt;
&lt;li&gt;Google Play ブックス&lt;/li&gt;
&lt;li&gt;Google Playムービー&amp;amp;TV&lt;/li&gt;
&lt;li&gt;Google+ (フォトも同時に無効化される)&lt;/li&gt;
&lt;li&gt;Googleテキスト読み上げエンジン&lt;/li&gt;
&lt;li&gt;Gummi&lt;/li&gt;
&lt;li&gt;iコンシェルコンテンツ&lt;/li&gt;
&lt;li&gt;Info-eye&lt;/li&gt;
&lt;li&gt;Lifelog&lt;/li&gt;
&lt;li&gt;Live on YouTube&lt;/li&gt;
&lt;li&gt;Movie Creator (なぜか同名で2つある)&lt;/li&gt;
&lt;li&gt;OfficeSuite&lt;/li&gt;
&lt;li&gt;ScreenLockService&lt;/li&gt;
&lt;li&gt;Social live&lt;/li&gt;
&lt;li&gt;TalkBack&lt;/li&gt;
&lt;li&gt;TV launcher&lt;/li&gt;
&lt;li&gt;Video Unlimited&lt;/li&gt;
&lt;li&gt;VMware Ready&lt;/li&gt;
&lt;li&gt;Walkman&lt;/li&gt;
&lt;li&gt;Windows テザリング接続&lt;/li&gt;
&lt;li&gt;Wood&lt;/li&gt;
&lt;li&gt;Xperia Calender Sync&lt;/li&gt;
&lt;li&gt;Xperia Music Likes&lt;/li&gt;
&lt;li&gt;Xperia Social Engine Photos (同名で2つPicasaとFacebookのアイコン)&lt;/li&gt;
&lt;li&gt;Xperia Social Engine Sharing (同名で2つFacebookとTwitterのアイコン)&lt;/li&gt;
&lt;li&gt;Xperia用Facebook&lt;/li&gt;
&lt;li&gt;Xperia用Twitter&lt;/li&gt;
&lt;li&gt;YouTubeカラオケプラグイン&lt;/li&gt;
&lt;li&gt;YouTubeプラグイン&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Android"></category><category term="SO-02G"></category></entry><entry><title>Redmineをインストールしてみた</title><link href="/posts/2015/03/redmine.html" rel="alternate"></link><updated>2015-03-21T15:53:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-03-21:posts/2015/03/redmine.html</id><summary type="html">&lt;p&gt;Googleカレンダーに予定を入れるようにしていたんだけれど、カレンダーなので日付を入れなくてはいけなくて&lt;br /&gt;
日にちが決まってないけれどやろうと思っていることを入れておくことができないのでちょっと不便でした&lt;br /&gt;
Redmine等のプロジェクト管理ソフトを入れるのは大袈裟な気がしていたんだけれどRedmineは以前仕事でも使っていたし&lt;br /&gt;
自分のサーバにインストールして使うとなると思いの外選択肢が少ない感じだったのでRedmineを入れてみました&lt;/p&gt;
&lt;p&gt;もやっとした要件は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サービスでなく、自分のサーバにインストールできること&lt;/li&gt;
&lt;li&gt;依存するものが少なく、導入が楽&lt;/li&gt;
&lt;li&gt;日付を入れずにタスクを登録できる&lt;/li&gt;
&lt;li&gt;優先度を設定できる&lt;/li&gt;
&lt;li&gt;日付が入っているものはカレンダーで確認できる&lt;/li&gt;
&lt;li&gt;スマホからタスクを確認、編集できる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんとなく導入が面倒というイメージを持っていたんだけれど、手順を見る限り簡単そうでした&lt;br /&gt;
ただ、少しハマった部分もあるのでそれは後述 (最新は3.0.1なんだけれどドキュメントが2.xのまま更新されていなかったりする&lt;br /&gt;
あとスマホでのタスクの確認はRedmineではできなくて、 &lt;a href="https://play.google.com/store/apps/details?id=jp.co.projectmode.redminepm"&gt;RedminePM&lt;/a&gt; というアプリから行うことにしました&lt;/p&gt;
&lt;p&gt;今回RedmineをインストールするOSにはRubyが入っていないのでRedmine用のユーザを用意して&lt;br /&gt;
ホームディレクトリにrbenvをインストール、rbenvを使ってRubyをインストール、Redmineをインストール&lt;br /&gt;
と、全て専用ユーザのホームディレクトリ以下で済ますことにしました&lt;br /&gt;
また、追加でインストールするものも抑えたかったのでRedmineはWEBRick、SQLite、ImageMagickなし、で動かすことにしました&lt;/p&gt;
&lt;p&gt;まずユーザを作って、ログイン&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# useradd -m redmine&lt;/span&gt;
&lt;span class="c"&gt;# su - redmine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; と &lt;a href="https://github.com/sstephenson/ruby-build"&gt;ruby-build&lt;/a&gt; をインストールする&lt;br /&gt;
ここからは全てこのユーザのホームディレクトリ以下で作業&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.qoosky.net/references/128/"&gt;rbenvおよびbundlerの基本的な使用方法&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/emadurandal/items/a60886152a4c99ce1017"&gt;Rails開発環境の構築（rbenvでRuby導入からBundler、Rails導入まで）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rbenvとruby-buildをclone&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/sstephenson/rbenv.git .rbenv
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/sstephenson/ruby-build.git .rbenv/plugins/ruby-build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rbenvの設定を.bashrcに追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt;.bashrc
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(rbenv init -)&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt;.bashrc
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rbenvでrubyとbundlerをインストールする&lt;br /&gt;
&lt;code&gt;rbenv install -l&lt;/code&gt; でインストール可能なRubyのバージョン、 &lt;code&gt;rbenv versions&lt;/code&gt; でインストール済みを確認できる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv install -l
...
  2.2.0-rc1
  2.2.0
  2.2.1
  2.3.0-dev
...
&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv install 2.2.1
&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv versions
  2.2.1
&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv global 2.2.1
&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv &lt;span class="nb"&gt;exec &lt;/span&gt;gem install bundler --no-rdoc --no-ri
&lt;span class="nv"&gt;$ &lt;/span&gt;rbenv rehash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineをインストールする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.redmine.jp/articles/3_0/installation_centos/"&gt;Redmine 3.0をCentOS 7.0にインストールする手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://redmine.jp/guide/RedmineInstall/"&gt;Redmineのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.redmine.org/projects/redmine/wiki/redmineinstall"&gt;Installing Redmine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redmineをclone (最新のバージョンは3.0なので、ブランチを切り替え)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/redmine/redmine.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;redmine
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout 3.0-stable
&lt;span class="nv"&gt;$ &lt;/span&gt;cp config/database.yml.example config/database.yml
&lt;span class="nv"&gt;$ &lt;/span&gt;cp config/configuration.yml.example config/configuration.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;config/database.yml&lt;/code&gt; は以下のSQLiteの部分以外すべてコメントアウト&lt;br /&gt;
&lt;code&gt;config/configuration.yml&lt;/code&gt; には本来メールサーバ等の設定が必要だけれど今回は必要ないので特に編集はしない&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# SQLite3 configuration example
production:
  adapter: sqlite3
  database: db/redmine.sqlite3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;RedmineがURLのサブディレクトリ以下に見えるようにインストールしたかったのでこれらを参考にした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.redmine.org/boards/2/topics/30676?r=30881#message-30881"&gt;Redmine 2.0 "No route matches"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.redmine.org/issues/11058"&gt;Run Redmine in a sub directory results in "No route matches"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.redmine.org/issues/11881#note-14"&gt;FCGI mode does not support sub-URI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;config/environment.rb&lt;/code&gt; の末尾の部分がこのようになるように &lt;code&gt;default_scope&lt;/code&gt; と &lt;code&gt;relative_url_root&lt;/code&gt; を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;RedmineApp&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/redmine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:shallow_path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/redmine&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Initialize the Rails application&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize!&lt;/span&gt;
&lt;span class="no"&gt;Redmine&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Utils&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;relative_url_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/redmine&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;サブディレクトリにアクセスしてもpublicの中身が見えるようにリンクを作成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s . public/redmine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmineが依存するGemをインストール、各種初期データの生成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle install --without development &lt;span class="nb"&gt;test &lt;/span&gt;rmagick --path vendor/bundle
&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake generate_secret_token
&lt;span class="nv"&gt;$ RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake db:migrate
&lt;span class="nv"&gt;$ RAILS_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production &lt;span class="nv"&gt;REDMINE_LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ja bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake redmine:load_default_data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ひと通りインストールが終わったので起動して &lt;a href="http://localhost:3000/redmine"&gt;http://localhost:3000/redmine&lt;/a&gt; にアクセスしてみる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ruby bin/rails server webrick -e production
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bin/rails&lt;/code&gt; を使う (2.x系と変わっているらしい&lt;/li&gt;
&lt;li&gt;デフォルトでは127.0.0.1にbindされるので別のマシンからアクセスしたい場合は &lt;code&gt;-b 192.168.1.1&lt;/code&gt; オプションを使う&lt;/li&gt;
&lt;li&gt;デーモンとして起動させたい場合は &lt;code&gt;-d&lt;/code&gt; オプションを使う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;起動しなかったり、うまく動作していなさそうだったら &lt;code&gt;log/production.log&lt;/code&gt; を確認する&lt;br /&gt;
問題なさそうであれば &lt;code&gt;config/environments/production.rb&lt;/code&gt; を編集してログレベルを下げる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:warn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前段のNginxに設定を追加して外からアクセスできるようにしておわり&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;redmine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;auth_basic&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;restricted - redmine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;auth_basic_user_file&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;htpasswd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redmine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Ruby"></category><category term="Redmine"></category><category term="Nginx"></category></entry><entry><title>adb backupのデータを展開する</title><link href="/posts/2015/03/adb-backup.html" rel="alternate"></link><updated>2015-03-14T16:53:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-03-14:posts/2015/03/adb-backup.html</id><summary type="html">&lt;p&gt;会社から支給されていた HTL21 の調子がわるくて、最近いつの間にか電源が落ちていたりするので&lt;br /&gt;
Xperia Z3 Compact (SO-02G) に変えてもらいました&lt;br /&gt;
アプリは手動でインストールし直して済むくらいしか入っていないのでそれでよかっんだけれど&lt;br /&gt;
本体に入っている画像等のデータを簡単に抜き出す方法がよくわかりませんでした&lt;br /&gt;
Android 4.0 以降からは &lt;code&gt;adb backup&lt;/code&gt; が使えるのでそれでデータを抜き出せそうな気がして調べてみたところ&lt;br /&gt;
&lt;code&gt;adb backup&lt;/code&gt; でバックアップされる独自形式のデータを tar 形式に変換するツールが既にありました&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sourceforge.jp/projects/sfnet_adbextractor/"&gt;Android Backup Extractor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを使えばバックアップしたデータのうち必要なものだけ抜き出せそう&lt;br /&gt;
SD カードになにもかも保存してくれると移行が楽でいいんだけれどなぁ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;adb backup [-f &amp;lt;file&amp;gt;] [-apk|-noapk] [-obb|-noobb] [-shared|-noshared] [-all] [-system|-nosystem] [&amp;lt;packages...&amp;gt;]
                             - write an archive of the device&amp;#39;s data to &amp;lt;file&amp;gt;.
                               If no -f option is supplied then the data is written
                               to &amp;quot;backup.ab&amp;quot; in the current directory.
                               (-apk|-noapk enable/disable backup of the .apks themselves
                                  in the archive; the default is noapk.)
                               (-obb|-noobb enable/disable backup of any installed apk expansion
                                  (aka .obb) files associated with each application; the default
                                  is noobb.)
                               (-shared|-noshared enable/disable backup of the device&amp;#39;s
                                  shared storage / SD card contents; the default is noshared.)
                               (-all means to back up all installed applications)
                               (-system|-nosystem toggles whether -all automatically includes
                                  system applications; the default is to include system apps)
                               (&amp;lt;packages...&amp;gt; is the list of applications to be backed up.  If
                                  the -all or -shared flags are passed, then the package
                                  list is optional.  Applications explicitly given on the
                                  command line will be included even if -nosystem would
                                  ordinarily cause them to be omitted.)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;adb backup&lt;/code&gt; の説明はこんな感じなので、アプリのバックアップが必要なければ &lt;code&gt;-shared&lt;/code&gt; だけ指定すればよさそう&lt;br /&gt;
&lt;code&gt;-shared&lt;/code&gt; を付けて実行すると SD カードの中身までバックアップしようとするので実行前に外しておくこと&lt;br /&gt;
実行するとコンソールにこのようなメッセージが出力されるので端末の画面を確認する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;adb backup -f backup.ab -shared
Now unlock your device and confirm the backup operation.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="/static/images/2015/03/Screenshot_2015-03-15-02-27-34.png"&gt;&lt;img alt="dialog" src="/static/images/2015/03/Screenshot_2015-03-15-02-27-34_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;端末側にこのようなダイアログが表示されるので、パスワードの入力をせずに &lt;code&gt;データのバックアップ&lt;/code&gt; をタップする&lt;br /&gt;
バックアップの処理中は特にプログレスが表示されるわけではないのでそのまま放置する&lt;br /&gt;
処理が終了するとしれっとプロンプトが戻ってきているはず&lt;/p&gt;
&lt;p&gt;これでデータの吸い出しは終わったので変換して展開すれば取り出すことができる&lt;br /&gt;
&lt;a href="http://sourceforge.jp/projects/sfnet_adbextractor/"&gt;Android Backup Extractor&lt;/a&gt; のサイトから &lt;code&gt;abe.jar&lt;/code&gt; をダウンロードする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;abe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;README を読むと展開をするにはこのようなコマンドを実行すればいいみたいなのでそのとおりに実行する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;java -jar abe.jar unpack backup.ab backup.tar
Strong AES encryption not allowed
Magic: ANDROID BACKUP
Version: 1
Compressed: 1
Algorithm: none
&lt;span class="m"&gt;1710935552&lt;/span&gt; bytes written to backup.tar.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで一般的な tar 形式に変換されたので展開して中身を取り出すことができた&lt;br /&gt;
今回は取り出した中身を SD カードにコピーして新しい端末で使用することにした&lt;/p&gt;
&lt;p&gt;参考
* &lt;a href="http://port139.hatenablog.com/entry/2014/07/17/065152"&gt;adb backup で Android 端末のバックアップを作成する(3)&lt;/a&gt;&lt;/p&gt;</summary><category term="Android"></category><category term="HTL21"></category><category term="SO-02G"></category></entry><entry><title>WiFi機能付き体重計を買ってみた</title><link href="/posts/2015/02/withings.html" rel="alternate"></link><updated>2015-02-27T01:49:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-02-27:posts/2015/02/withings.html</id><summary type="html">&lt;p&gt;体重計は元々持っていたのですが最近多少体重が気になってきているのと&lt;br /&gt;
あまり頻繁に計らないので以前どれくらいだったか思い出せない&amp;amp;記録をつけるのが面倒&lt;br /&gt;
と言うことで &lt;a href="http://www.amazon.co.jp/dp/B00GRP609C"&gt;Withings Smart Body Analyzer WS-50&lt;/a&gt; を購入してみました&lt;br /&gt;
とは言っても実際主に使うのは妻なんですが、せっかく買ったのでどんな感じか書いてみようと思います&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/02/IMAG1576.jpg"&gt;&lt;img alt="box" src="/static/images/2015/02/IMAG1576_s.jpg" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/02/IMAG1578.jpg"&gt;&lt;img alt="unbox" src="/static/images/2015/02/IMAG1578_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;まず無線を使用してデータを外部に記録してくれる体重計には主にBluetoothとWiFiの2種類があるみたいです&lt;br /&gt;
それ以外にFelicaを使用するものもあるようでした&lt;br /&gt;
Bluetooth対応のものは一度スマホのアプリへデータを送信し、アプリがサーバへデータを送信する仕組みになっているみたいです&lt;br /&gt;
WiFi対応のものはアクセスポイントを介し直接サーバへデータを送信するようです&lt;br /&gt;
あまり詳しくは調べていないのですが、おそらくBluetooth対応の機種ではデータを送信する際に&lt;br /&gt;
必ずアプリ側の操作が必要なのではないかということが気になりました&lt;br /&gt;
それでは何かしらの操作が必要という点では手作業で記録するのと変わらないわけで&lt;br /&gt;
あまりメリットがないかなと感じたためWiFi対応の機種を購入することに決めました&lt;/p&gt;
&lt;p&gt;とかそんなことをいろいろ考えてWS-50を購入してみて良かったと思った点は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;体重計に乗るだけで電源がONになり計測開始&lt;/li&gt;
&lt;li&gt;前回体重を元に乗っている人を自動判別&lt;/li&gt;
&lt;li&gt;計測が終わると自動でデータをアップロード&lt;/li&gt;
&lt;li&gt;勝手に電源OFF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったところです&lt;br /&gt;
個別に見るとそれほどすごい機能でもないし、おそらく他の体重計でも実現できていると思うのですが&lt;br /&gt;
なにがいいかというと、とりあえずなにも考えずに乗って画面が消えたら降りればいい、というところ&lt;br /&gt;
僕が体重を計るのは朝か夜の風呂から出たあとなのですが、風呂から出た時は眼鏡を掛けていません&lt;br /&gt;
結構目が悪いので立った状態で体重計に乗ると表示が見えないんです&lt;br /&gt;
なので今まではなんとなくタイミングを見計らって体重計から降りて確認していました&lt;br /&gt;
今では画面が消えたら降りて、あとでスマホで確認すればOKです、非常にスマートだと思います&lt;/p&gt;
&lt;p&gt;他社も似たようなWiFi機能付き体重計を出しているのですがその中でなぜこの機種を選んだかというと&lt;br /&gt;
計測したデータの預りが無料だった点、あとCSVでのエクスポートもできるみたいです&lt;br /&gt;
正直、半年以上は有料とか、機能制限があって全ての機能を使うには課金とか、ちょっとそれは嫌だなと思いました…&lt;/p&gt;
&lt;p&gt;そんな感じでこの体重計には概ね満足だったのですが、いくつか気になる点もあったのであげておきます&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;付属の説明書が役に立たない&lt;br /&gt;
ぺらっと1枚説明書が入っていてアプリと本体のセットアップの仕方が書いてあるのですが&lt;br /&gt;
説明で使用しているアプリのバージョンが古いみたいで画面とフローが若干異なっていました…&lt;br /&gt;
全体の流れはこんな感じ&lt;ul&gt;
&lt;li&gt;アプリのインストール&lt;/li&gt;
&lt;li&gt;スマホのBluetoothとWiFiを有効にする (WiFiはアクセスポイントから切断しておく(後述))&lt;/li&gt;
&lt;li&gt;本体裏のペアリングボタンを押す&lt;/li&gt;
&lt;li&gt;スマホ側で検索してペアリングさせる&lt;/li&gt;
&lt;li&gt;アプリの起動&lt;/li&gt;
&lt;li&gt;アカウントの作成&lt;/li&gt;
&lt;li&gt;WiFiアクセスポイントの検索&amp;amp;設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アクセスポイントの検出に失敗した&lt;br /&gt;
これは端末依存な気もしますが、アプリを使って本体へ接続したいアクセスポイントの情報を送信してセットアップします&lt;br /&gt;
この際スマホのWiFiが既にアクセスポイントに接続済みだとアクセスポイントの検出がうまくいきませんでした&lt;br /&gt;
セットアップの開始前にアクセスポイントから切断した状態にしておく必要があるみたいです&lt;/li&gt;
&lt;li&gt;複数ユーザで使用する場合の説明がない&lt;br /&gt;
複数ユーザで使用する際、2種類の方法があるみたいです  &lt;ul&gt;
&lt;li&gt;1つのアカウントを共有してアカウント内にユーザを追加する方法&lt;br /&gt;
この場合アカウント内に存在するユーザのデータは他のユーザから見えてしまいます&lt;br /&gt;
見えてしまうのが嫌なのでやはりやめたいという場合は、データをそのまま別のアカウントへ独立させることができます&lt;br /&gt;
(設定→ユーザー→独立させる)&lt;/li&gt;
&lt;li&gt;2つのアカウントを用意しそれぞれ個別に本体とリンクさせる方法&lt;br /&gt;
こちらの方法ではそれぞれのアカウントが独立しているので他の人のデータを見ることはできません&lt;br /&gt;
試してはいませんがこの場合でも共有の機能を使うと他人にデータを見せることはできるみたいです&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;うちではアカウントを共有する方法で使用しています&lt;br /&gt;
妻は多少嫌みたいですがそれほど気になっている感じでもないみたいですね&lt;br /&gt;
少しプレッシャーになって良い効果もあるかもしれないけれど独立させるかはちょっと考えたほうがいいかもしれない&lt;br /&gt;
購入してから毎日2,3回計測して10日ほど経って多少データがたまると&lt;br /&gt;
どのように見えるのかWebとAndroidアプリのスクリーンショットを貼っておきます&lt;br /&gt;
しかし若干上昇傾向ですね、どうしたものか…&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2015/02/HealthMate.png"&gt;&lt;img alt="box" src="/static/images/2015/02/HealthMate_s.png" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2015/02/Android.png"&gt;&lt;img alt="unbox" src="/static/images/2015/02/Android_s.png" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="WS-50"></category></entry><entry><title>2015年ですね</title><link href="/posts/2015/02/2015-todo.html" rel="alternate"></link><updated>2015-02-04T01:29:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2015-02-04:posts/2015/02/2015-todo.html</id><summary type="html">&lt;p&gt;2015年になってもう1ヶ月経ちますね、みなさまいかがお過ごしでしょうか&lt;/p&gt;
&lt;p&gt;私は年明け自分の実家や妻の実家へ行ったりで慌ただしい感じでした&lt;br /&gt;
そしてそのまま初仕事の日を迎えたわけですが、体調が整わないままずるずるときてしまいました&lt;br /&gt;
だましだまし出勤はしていたのですがちょいちょい体調不良を繰り返していて&lt;br /&gt;
最終的に1月末には寝こむくらいの結構大変な風邪をひいてしまいました&lt;br /&gt;
気がついたら3Kgも痩せてしまいましたが今では一応復活しています&lt;/p&gt;
&lt;p&gt;さて、一応新年の一発目なので、今年どんなことをしたいかとか&lt;br /&gt;
もう1ヶ月経っているので最近はじめたことを書こうかと思います  &lt;/p&gt;
&lt;p&gt;最近会社で筋トレをするグループができていて、誘われたので同僚と毎日2回、簡単な運動をしています&lt;br /&gt;
毎年言っているような気がしますが、今年はもっと体力をつけたいですね、あと英会話の勉強&lt;/p&gt;
&lt;p&gt;去年はArduino等、電子工作に手を出した年だった気がします&lt;br /&gt;
学生時代に勉強したオームの法則とかも懐かしいし、色々新しく知ることも多くて面白いですね&lt;br /&gt;
今年も引き続きなにかできたらいいなと思っています&lt;/p&gt;
&lt;p&gt;あと今年に入ってからは木工にも手を出しています&lt;br /&gt;
これからなにか記事にしてまとめようと思ってはいるのですがまだできていません&lt;br /&gt;
木工も電子工作とは似ているけれどまた違う楽しみがありますね&lt;/p&gt;
&lt;p&gt;あとは本業のソフトウェア&lt;br /&gt;
これはまぁ引き続きという感じで今まで作ったものの改善とか&lt;br /&gt;
途中のままになっているものを完成させるとか&lt;br /&gt;
なにかお金がかからなくて面白そうなことがあればやりたいです&lt;/p&gt;
&lt;p&gt;大雑把にまとめるとこんな感じで、 今のところ考えている具体的なことは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;運動をする → とりあえず現状でOK?&lt;/li&gt;
&lt;li&gt;英会話の勉強をする → 英会話教室に通う?&lt;/li&gt;
&lt;li&gt;電子工作関係&lt;ul&gt;
&lt;li&gt;去年作った &lt;a href="http://blog.gorugle.org/posts/2014/11/ir.html"&gt;赤外線リモコンのサンプル&lt;/a&gt; をきちんとしたものに仕上げたい&lt;ul&gt;
&lt;li&gt;リモコン以外に温度、湿度、照度等のセンサも試したい&lt;/li&gt;
&lt;li&gt;ケースに入れる&lt;/li&gt;
&lt;li&gt;PCから送信する赤外線の信号を入力できるようにする&lt;/li&gt;
&lt;li&gt;外部から操作できるようにインターフェイスを用意する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;USB機器を複数マシンで切り替えて使える切替器の作成 → 作業中&lt;/li&gt;
&lt;li&gt;&lt;a href="http://laboratory-danger-robo.blogspot.jp/2015/01/blog-post.html"&gt;この時計&lt;/a&gt; がいいなと思ったので似たようなものを作りたい&lt;ul&gt;
&lt;li&gt;使ってるのは &lt;a href="http://akizukidenshi.com/catalog/g/gI-08328/"&gt;これ&lt;/a&gt; かな?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arduinoとしてでなく直接AVRを扱ってみたい&lt;/li&gt;
&lt;li&gt;PICも&lt;/li&gt;
&lt;li&gt;家全体の電力を計測したい&lt;ul&gt;
&lt;li&gt;このあたりを参考に&lt;br /&gt;
&lt;a href="http://www.tumori.nu/mono/clamp/"&gt;http://www.tumori.nu/mono/clamp/&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://toolmaster.blog.fc2.com/blog-entry-9.html"&gt;http://toolmaster.blog.fc2.com/blog-entry-9.html&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://homepage3.nifty.com/sudamiyako/zk/PwrChk/pwrchk.html"&gt;http://homepage3.nifty.com/sudamiyako/zk/PwrChk/pwrchk.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;あとこのあたりを参考に &lt;a href="http://tocos-wireless.com/jp/products/TWE-Lite-DIP/"&gt;TWE-Lite&lt;/a&gt; を使って無線化をしてみたい&lt;br /&gt;
&lt;a href="http://qiita.com/ksasao/items/1a221843894fdb57677b"&gt;http://qiita.com/ksasao/items/1a221843894fdb57677b&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://qiita.com/lutecia16v/items/efff1c6482e6ce713771"&gt;http://qiita.com/lutecia16v/items/efff1c6482e6ce713771&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;木工関係&lt;ul&gt;
&lt;li&gt;洗面所の謎の空間に入る棚を作る → 済&lt;/li&gt;
&lt;li&gt;ロールカーテン取り付け用の木の突っ張り棒を作る → 済&lt;/li&gt;
&lt;li&gt;洗濯機の台と一体になった洗濯機置き場周辺の空間が有効利用できるような棚?を作る&lt;/li&gt;
&lt;li&gt;机を作る&lt;ul&gt;
&lt;li&gt;ケーブルを収納できるようにする&lt;/li&gt;
&lt;li&gt;ケーブルの収納を取り外せば普通の机、テーブルとして使える設計にする&lt;/li&gt;
&lt;li&gt;モニタアームを取り付ける空間を予め考慮する&lt;/li&gt;
&lt;li&gt;引っ越しを考慮して足を取り外せるようにする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PC、サーバを置く棚を作る&lt;ul&gt;
&lt;li&gt;机と並べるので似たデザインにする&lt;/li&gt;
&lt;li&gt;同じ高さにして天板がフラットになるようにする&lt;/li&gt;
&lt;li&gt;別の用途に転用できるように特殊な形にしない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有孔ボードを使った収納を作る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソフトウェア関係&lt;ul&gt;
&lt;li&gt;MQTTを送受信できるプログラムを作る → &lt;a href="https://github.com/lostman-github/mqttcd"&gt;ここで作業中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hitoriblog.com/?p=23782"&gt;CloudFlash&lt;/a&gt; を持っているのでこれでなにか面白いことをする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とりあえず思いつくことはこんな感じ、他にも思いついたら加筆修正する予定&lt;br /&gt;
そういえば新婚旅行決めてないんだよなぁ&lt;/p&gt;</summary><category term="Diary"></category><category term="ToDo"></category></entry><entry><title>新しいサーバ用マシン買いました</title><link href="/posts/2014/12/j1900.html" rel="alternate"></link><updated>2014-12-05T00:53:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-12-05:posts/2014/12/j1900.html</id><summary type="html">&lt;p&gt;実はもう1ヶ月くらい前の話なんだけれど、安定して動作しているので記事にしてみる&lt;br /&gt;
今までの環境はHPのMicroServer1台で&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;録画&lt;/li&gt;
&lt;li&gt;NFS、Sambaでのファイル共有&lt;/li&gt;
&lt;li&gt;PPPoEで有線のルータ&lt;/li&gt;
&lt;li&gt;無線のアクセスポイント&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等のサービスを提供していた&lt;br /&gt;
騒音の面もあってこのマシンはリビングから遠くに位置していて、リビングからは無線の電波がいまいちな状態になっていた&lt;br /&gt;
遅いだけなら我慢もできたんだけれど、位置によっては切断されたりもするのでアクセスポイントの位置をリビングに移動したかった&lt;br /&gt;
ただMicroServerはそれなりにHDDの音がするので移動するわけにはいかず…&lt;br /&gt;
普通の無線ルータを購入してもよかったのだけれどいろいろ考えた末、他の機能もこっちに分離するために自作することにした&lt;br /&gt;
購入したのは以下のパーツ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.gigabyte.jp/products/product-page.aspx?pid=4918#ov"&gt;GIGABYTE GA-J1900N-D3V&lt;/a&gt; 11010円 (10%ポイント)&lt;br /&gt;
Celeron J1900 (4 Core, 4 Thread)、Realtek GbEx2&lt;br /&gt;
ファンレスでNICが2つ付いているのがこれくらいしかなかったので必然的に&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/dp/B00AA7SRDA"&gt;SanMax SMD-N8GNP-13H-D&lt;/a&gt; 9561円&lt;br /&gt;
SO-DIMM DDR3-1333 4GBx2 ELPIDAチップ&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.links.co.jp/item/isk-110-vesa/"&gt;ANTEC ISK-110 VESA&lt;/a&gt; 9590円 (10%ポイント)&lt;br /&gt;
小さくてACアダプタだったので&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;届いた箱たち&lt;br /&gt;
&lt;a href="/static/images/2014/12/IMAG1204.jpg"&gt;&lt;img alt="box" src="/static/images/2014/12/IMAG1204_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮組みしてMemtest中&lt;br /&gt;
&lt;a href="/static/images/2014/12/IMAG1205.jpg"&gt;&lt;img alt="memtest" src="/static/images/2014/12/IMAG1205_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最終的にはこんな感じ&lt;br /&gt;
見えないけれど裏側に余ってたSSDが装着されている&lt;br /&gt;
&lt;a href="/static/images/2014/12/IMAG1211.jpg"&gt;&lt;img alt="assembled" src="/static/images/2014/12/IMAG1211_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今はテレビ台の中に設置されている、それなりに発熱するしテレビ台は扉が閉まるタイプで&lt;br /&gt;
熱がこもりやすいのでもしかしたら夏場はファンレスで運用するのは辛いかもしれない&lt;br /&gt;
ただ4スレッドだからかメモリを多く積んでいるからかMicroServerより随分快適な印象&lt;br /&gt;
このマシンには有線ルータと無線のアクセスポイント、それ以外にも一部のサービスを分担してもらっている&lt;br /&gt;
それらはいつも通りGentooをインストールして運用しているんだけれど、それはまた次の話&lt;/p&gt;</summary><category term="Hardware"></category></entry><entry><title>Arduinoをリモコンにしてみる</title><link href="/posts/2014/11/ir.html" rel="alternate"></link><updated>2014-11-25T23:02:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-11-25:posts/2014/11/ir.html</id><summary type="html">&lt;p&gt;秋月電子で赤外線の受信モジュールとLEDを購入して学習リモコン的なものを作ってみた&lt;br /&gt;
今回使用したのは以下の部品&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arduino Uno&lt;/li&gt;
&lt;li&gt;赤外線リモコン受信モジュール &lt;a href="http://akizukidenshi.com/catalog/g/gI-06487/"&gt;GP1UXC41QS&lt;/a&gt; x1 1個50円&lt;/li&gt;
&lt;li&gt;5mm赤外線LED &lt;a href="http://akizukidenshi.com/catalog/g/gI-04311/"&gt;OSI5LA5113A&lt;/a&gt; x3 10個100円&lt;/li&gt;
&lt;li&gt;タクトスイッチ &lt;a href="http://akizukidenshi.com/catalog/g/gP-03647/"&gt;DTS-6&lt;/a&gt; x1 1個10円&lt;/li&gt;
&lt;li&gt;プルダウン用の抵抗1KΩ x1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれを以下のように接続した&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arduino&lt;/th&gt;
&lt;th&gt;部品&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;GP1UXC41QSのVout&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;GP1UXC41QSのGND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;GP1UXC41QSのVcc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;td&gt;タクトスイッチの2番&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;タクトスイッチの4番 (プルダウン抵抗をつける)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;OSI5LA5113A x3 の+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;OSI5LA5113A x3 の-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;GP1UXC41QSのデータシートの &lt;code&gt;6. 製品の実装について&lt;/code&gt; の項に &lt;code&gt;CRフィルターを実装してください&lt;/code&gt; とあるけれど&lt;br /&gt;
お試しなので今回は省略して回路を組んだ&lt;br /&gt;
手元の環境では特に問題は起きていないけれど誤動作する可能性があるので注意&lt;/p&gt;
&lt;p&gt;実際に接続するとこのようになる&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2014/11/IMAG1268.jpg"&gt;&lt;img alt="image" src="/static/images/2014/11/IMAG1268_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ソースコードは &lt;a href="https://github.com/lostman-github/arduino/blob/master/Uno/IR/sample/sample.ino"&gt;Github&lt;/a&gt; に置いてある&lt;/p&gt;
&lt;p&gt;書き込んでシリアルモニタを表示すると &lt;code&gt;.&lt;/code&gt; が1秒毎に表示される、これは受信状態であることを表している&lt;br /&gt;
この状態で本物のリモコンをセンサに向けてボタンを押すと読み込んだ結果を出力する&lt;/p&gt;
&lt;p&gt;ここで出力される情報は他の色々なサイトで見ることができるサンプルと同様に&lt;br /&gt;
センサの出力の値が切り替わるまでの時間を10µs単位で計測したもの&lt;br /&gt;
&lt;code&gt;4384,1032,510,67,....&lt;/code&gt; と出力されたら、先頭から43840µsのOFF、10320µsのON、5100µsのOFF、670µsのONを表している&lt;br /&gt;
先頭のOFFは無通信時間で不要な情報なので、これを除外してソースに埋め込めばこのデータを使ってLEDを発光させることができる&lt;/p&gt;
&lt;p&gt;タクトスイッチを押すと &lt;code&gt;Send&lt;/code&gt; が表示されソースコードに埋め込まれている情報を元にLEDを発光させる&lt;/p&gt;
&lt;p&gt;実行例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
.
.4384,1032,510,67,62,67,62,66,187,67,61,70,62,66,61,67,62,67,187,69,188,66,62,66,61,67,62,69,187,67,61,66,187,67,61,70,61,66,187,67,62,66,188,70,187,66,62,66,62,66,187,69,188,66,61,66,188,66,61,70,62,66,188,66,187,66,62,66,
.
.
.
.
.
Send
.
.
.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ソースに関しては他のサイトを参考にして簡潔になるように書きなおした程度で&lt;br /&gt;
細かい説明は説明は不要だと思われるけれど、1点ハマったポイントがあったので経緯をメモしておく&lt;/p&gt;
&lt;p&gt;作成にあたってソースコードは初めからほぼ最終形に近い形になっていて、受信に関しては期待通り動作していた&lt;br /&gt;
ただ送信が全く動かなくて原因もよくわからない状態だった&lt;/p&gt;
&lt;p&gt;赤外線は携帯のカメラを使うと見ることができるので、それでLEDが発光していることは確認した&lt;br /&gt;
とりあえず光っていることは確認できたので受信側が認識するために必要な38KHzが&lt;br /&gt;
うまく作り出せていないのかと思ってオシロで確認する以外に何か方法がないか考えてみた&lt;br /&gt;
よくよく考えたら単純に自分で送信したものを今回作成した受信部で受信して、&lt;br /&gt;
本物のリモコンと同じ結果になっていることを確認すればいいことに気がついた&lt;/p&gt;
&lt;p&gt;試してみたら本物のリモコンはきっちり毎回同じ結果が出力されるのに対し、自作の方は安定しない様子&lt;br /&gt;
色々本物のリモコンが再現できるように調節しようとしてみたけれど&lt;br /&gt;
Arduinoの性能に依存しているのか完璧に再現することはできなかった&lt;/p&gt;
&lt;p&gt;で、色々やっている時にふと気がついて本物のリモコンを携帯のカメラで覗いてみたら&lt;br /&gt;
今回使用しているLEDよりずいぶん明るく見えたのと、LEDが1個でなく3個付いていることに気がついた&lt;br /&gt;
そこで自作の方も元々は1個だったんだけれど、3個に増やしてみたら期待通りに動作するようになった&lt;/p&gt;
&lt;p&gt;期待通りの信号が送信できているかについては、自分で受信してみるか、オシロで確認&lt;br /&gt;
光量については本物のリモコンと自作のものをカメラを使って目でで確認するしかない&lt;br /&gt;
受信側が認識できるくらいの光量を確保しなければいけないので、同じ部品、同じソースを使っても&lt;br /&gt;
受信側の機器が異なっていればうまく動作しないことがあることがわかった&lt;/p&gt;
&lt;p&gt;参考にしたサイト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://elm-chan.org/docs/ir_format.html"&gt;赤外線リモコンの通信フォーマット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akizukidenshi.com/download/k4174_format.pdf"&gt;リモコンフォーマット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shokai.org/blog/archives/8012"&gt;ArduinoとRubyで赤外線リモコン作ってWebから操作できるようにした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eikatou.net/blog/2012/07/1796/"&gt;Arduinoでリモコン作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/NeoCat/20090419/1240158722"&gt;Arduinoで学習リモコン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Arduino"></category><category term="IR"></category></entry><entry><title>Macのホスト名を固定する</title><link href="/posts/2014/11/mac-hostname.html" rel="alternate"></link><updated>2014-11-10T09:51:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-11-10:posts/2014/11/mac-hostname.html</id><summary type="html">&lt;p&gt;自宅のMacでは設定済みだったんだけれど、オフィスのMacでは未設定だったのでメモ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;scutil --get HostName
HostName: not &lt;span class="nb"&gt;set&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この結果になる場合ターミナルで表示されるホスト名がDNSから逆引きしたものになることがあるみたい&lt;br /&gt;
オフィスの環境だとならないけれど、自宅の環境だと &lt;code&gt;System Preferences -&amp;gt; Sharing&lt;/code&gt; で&lt;br /&gt;
元々設定してある大文字小文字混じりのホスト名が全て小文字に変わってしまう&lt;br /&gt;
ここの &lt;code&gt;Edit&lt;/code&gt; を押すと &lt;code&gt;Use dynamic global hostname&lt;/code&gt; といういかにもそれっぽい設定があるけれどこれは特に効果はなし&lt;br /&gt;
そのような場合は冒頭で確認するために使ったコマンドを使って固定することができる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# scutil --set HostName YourHostName&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただこの設定はSystem Preferencesの設定とは別にあるようで同期しない&lt;br /&gt;
そのためここで元々の設定とは全く別の値を指定することができるが&lt;br /&gt;
混乱の元なのでそういったことが起きないように気をつける必要がある&lt;/p&gt;</summary><category term="Mac"></category></entry><entry><title>使えなくなったHDDのS.M.A.R.T.の結果</title><link href="/posts/2014/11/smart.html" rel="alternate"></link><updated>2014-11-03T21:31:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-11-03:posts/2014/11/smart.html</id><summary type="html">&lt;p&gt;ずいぶん前の出来事だけれど、 &lt;a href="http://www.hgst.com/tech/techlib.nsf/techdocs/C2AF1DCDF0FBD887882578FE0082527B/$file/DS7K1000.D_ds.pdf"&gt;Hitachi Deskstar 7K1000.D&lt;/a&gt; がエラーを吐いて使えなくなったので&lt;br /&gt;
その時のS.M.A.R.T.の結果を記録しておく&lt;/p&gt;
&lt;p&gt;こんなメールでRAIDのアレイから外したことを通知されました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;This is an automatically generated mail message from mdadm

A Fail event had been detected on md device /dev/md1.

It could be related to component device /dev/sdc.

Faithfully yours, etc.

P.S. The /proc/mdstat file currently contains the following:

Personalities : [raid1]
md1 : active raid1 sdd[1] sdc[0](F)
      976762448 blocks super 1.0 [2/1] [_U]

md0 : active raid1 sdb[2] sda[0]
      2930266448 blocks super 1.0 [2/2] [UU]

unused devices: &amp;lt;none&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とりあえずRAIDは手元にあった古いディスクに差し替えて&lt;br /&gt;
問題のHDDのS.M.A.R.T.を確認してみたらこんな感じでした&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# smartctl -a /dev/sdf&lt;/span&gt;
smartctl 6.1 2013-03-16 r3800 &lt;span class="o"&gt;[&lt;/span&gt;x86_64-linux-3.10.7-gentoo-r1&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;build&lt;span class="o"&gt;)&lt;/span&gt;
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; 2002-13, Bruce Allen, Christian Franke, www.smartmontools.org

&lt;span class="o"&gt;===&lt;/span&gt; START OF INFORMATION &lt;span class="nv"&gt;SECTION&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
Model Family:     Hitachi Deskstar 7K1000.D
Device Model:     Hitachi HDS721010DLE630
Serial Number:    XXXXXXXXXXXXXX
LU WWN Device Id: &lt;span class="m"&gt;5&lt;/span&gt; 000cca 37cc0c0f2
Firmware Version: MS2OA5N0
User Capacity:    1,000,204,886,016 bytes &lt;span class="o"&gt;[&lt;/span&gt;1.00 TB&lt;span class="o"&gt;]&lt;/span&gt;
Sector Sizes:     &lt;span class="m"&gt;512&lt;/span&gt; bytes logical, &lt;span class="m"&gt;4096&lt;/span&gt; bytes physical
Rotation Rate:    &lt;span class="m"&gt;7200&lt;/span&gt; rpm
Device is:        In smartctl database &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; details use: -P show&lt;span class="o"&gt;]&lt;/span&gt;
ATA Version is:   ATA8-ACS T13/1699-D revision 4
SATA Version is:  SATA 2.6, 6.0 Gb/s &lt;span class="o"&gt;(&lt;/span&gt;current: 1.5 Gb/s&lt;span class="o"&gt;)&lt;/span&gt;
Local Time is:    Wed Aug &lt;span class="m"&gt;13&lt;/span&gt; 11:23:08 &lt;span class="m"&gt;2014&lt;/span&gt; JST
SMART support is: Available - device has SMART capability.
SMART support is: &lt;span class="nv"&gt;Enabled&lt;/span&gt;

&lt;span class="o"&gt;===&lt;/span&gt; START OF READ SMART DATA &lt;span class="nv"&gt;SECTION&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
SMART overall-health self-assessment &lt;span class="nb"&gt;test &lt;/span&gt;result: PASSED

General SMART Values:
Offline data collection status:  &lt;span class="o"&gt;(&lt;/span&gt;0x80&lt;span class="o"&gt;)&lt;/span&gt; Offline data collection activity
                                        was never started.
                                        Auto Offline Data Collection: Enabled.
Self-test execution status:      &lt;span class="o"&gt;(&lt;/span&gt;   0&lt;span class="o"&gt;)&lt;/span&gt; The previous self-test routine completed
                                        without error or no self-test has ever
                                        been run.
Total &lt;span class="nb"&gt;time &lt;/span&gt;to &lt;span class="nb"&gt;complete &lt;/span&gt;Offline
data collection:                &lt;span class="o"&gt;(&lt;/span&gt; 7410&lt;span class="o"&gt;)&lt;/span&gt; seconds.
Offline data collection
capabilities:                    &lt;span class="o"&gt;(&lt;/span&gt;0x5b&lt;span class="o"&gt;)&lt;/span&gt; SMART execute Offline immediate.
                                        Auto Offline data collection on/off support.
                                        Suspend Offline collection upon new
                                        command.
                                        Offline surface scan supported.
                                        Self-test supported.
                                        No Conveyance Self-test supported.
                                        Selective Self-test supported.
SMART capabilities:            &lt;span class="o"&gt;(&lt;/span&gt;0x0003&lt;span class="o"&gt;)&lt;/span&gt; Saves SMART data before entering
                                        power-saving mode.
                                        Supports SMART auto save timer.
Error logging capability:        &lt;span class="o"&gt;(&lt;/span&gt;0x01&lt;span class="o"&gt;)&lt;/span&gt; Error logging supported.
                                        General Purpose Logging supported.
Short self-test routine
recommended polling &lt;span class="nb"&gt;time&lt;/span&gt;:        &lt;span class="o"&gt;(&lt;/span&gt;   1&lt;span class="o"&gt;)&lt;/span&gt; minutes.
Extended self-test routine
recommended polling &lt;span class="nb"&gt;time&lt;/span&gt;:        &lt;span class="o"&gt;(&lt;/span&gt; 124&lt;span class="o"&gt;)&lt;/span&gt; minutes.
SCT capabilities:              &lt;span class="o"&gt;(&lt;/span&gt;0x003d&lt;span class="o"&gt;)&lt;/span&gt; SCT Status supported.
                                        SCT Error Recovery Control supported.
                                        SCT Feature Control supported.
                                        SCT Data Table supported.

SMART Attributes Data Structure revision number: 16
Vendor Specific SMART Attributes with Thresholds:
ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE
  &lt;span class="m"&gt;1&lt;/span&gt; Raw_Read_Error_Rate     0x000b   &lt;span class="m"&gt;079&lt;/span&gt;   &lt;span class="m"&gt;079&lt;/span&gt;   &lt;span class="m"&gt;016&lt;/span&gt;    Pre-fail  Always       -       824
  &lt;span class="m"&gt;2&lt;/span&gt; Throughput_Performance  0x0005   &lt;span class="m"&gt;141&lt;/span&gt;   &lt;span class="m"&gt;141&lt;/span&gt;   &lt;span class="m"&gt;054&lt;/span&gt;    Pre-fail  Offline      -       74
  &lt;span class="m"&gt;3&lt;/span&gt; Spin_Up_Time            0x0007   &lt;span class="m"&gt;124&lt;/span&gt;   &lt;span class="m"&gt;124&lt;/span&gt;   &lt;span class="m"&gt;024&lt;/span&gt;    Pre-fail  Always       -       &lt;span class="m"&gt;185&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Average 185&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="m"&gt;4&lt;/span&gt; Start_Stop_Count        0x0012   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       966
  &lt;span class="m"&gt;5&lt;/span&gt; Reallocated_Sector_Ct   0x0033   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;005&lt;/span&gt;    Pre-fail  Always       -       62
  &lt;span class="m"&gt;7&lt;/span&gt; Seek_Error_Rate         0x000b   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;067&lt;/span&gt;    Pre-fail  Always       -       0
  &lt;span class="m"&gt;8&lt;/span&gt; Seek_Time_Performance   0x0005   &lt;span class="m"&gt;130&lt;/span&gt;   &lt;span class="m"&gt;130&lt;/span&gt;   &lt;span class="m"&gt;020&lt;/span&gt;    Pre-fail  Offline      -       28
  &lt;span class="m"&gt;9&lt;/span&gt; Power_On_Hours          0x0012   &lt;span class="m"&gt;099&lt;/span&gt;   &lt;span class="m"&gt;099&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       11362
 &lt;span class="m"&gt;10&lt;/span&gt; Spin_Retry_Count        0x0013   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;060&lt;/span&gt;    Pre-fail  Always       -       0
 &lt;span class="m"&gt;12&lt;/span&gt; Power_Cycle_Count       0x0032   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       71
&lt;span class="m"&gt;192&lt;/span&gt; Power-Off_Retract_Count 0x0032   &lt;span class="m"&gt;099&lt;/span&gt;   &lt;span class="m"&gt;099&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       1247
&lt;span class="m"&gt;193&lt;/span&gt; Load_Cycle_Count        0x0012   &lt;span class="m"&gt;099&lt;/span&gt;   &lt;span class="m"&gt;099&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       1247
&lt;span class="m"&gt;194&lt;/span&gt; Temperature_Celsius     0x0002   &lt;span class="m"&gt;171&lt;/span&gt;   &lt;span class="m"&gt;171&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       &lt;span class="m"&gt;35&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Min/Max 17/45&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;196&lt;/span&gt; Reallocated_Event_Count 0x0032   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       110
&lt;span class="m"&gt;197&lt;/span&gt; Current_Pending_Sector  0x0022   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       0
&lt;span class="m"&gt;198&lt;/span&gt; Offline_Uncorrectable   0x0008   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Offline      -       0
&lt;span class="m"&gt;199&lt;/span&gt; UDMA_CRC_Error_Count    0x000a   &lt;span class="m"&gt;200&lt;/span&gt;   &lt;span class="m"&gt;200&lt;/span&gt;   &lt;span class="m"&gt;000&lt;/span&gt;    Old_age   Always       -       0

SMART Error Log Version: 1
No Errors Logged

SMART Self-test log structure revision number 1
Num  Test_Description    Status                  Remaining  LifeTime&lt;span class="o"&gt;(&lt;/span&gt;hours&lt;span class="o"&gt;)&lt;/span&gt;  LBA_of_first_error
&lt;span class="c"&gt;# 1  Short offline       Completed without error       00%     11361         -&lt;/span&gt;
&lt;span class="c"&gt;# 2  Short offline       Completed without error       00%     11319         -&lt;/span&gt;
&lt;span class="c"&gt;# 3  Short offline       Completed without error       00%     11228         -&lt;/span&gt;
&lt;span class="c"&gt;# 4  Short offline       Completed without error       00%     10769         -&lt;/span&gt;
&lt;span class="c"&gt;# 5  Short offline       Completed without error       00%     10702         -&lt;/span&gt;
&lt;span class="c"&gt;# 6  Short offline       Completed without error       00%     10702         -&lt;/span&gt;
&lt;span class="c"&gt;# 7  Short offline       Completed without error       00%     10446         -&lt;/span&gt;
&lt;span class="c"&gt;# 8  Short offline       Completed without error       00%      9861         -&lt;/span&gt;
&lt;span class="c"&gt;# 9  Short offline       Completed without error       00%      9817         -&lt;/span&gt;
&lt;span class="c"&gt;#10  Short offline       Completed without error       00%      9492         -&lt;/span&gt;
&lt;span class="c"&gt;#11  Short offline       Completed without error       00%      9431         -&lt;/span&gt;
&lt;span class="c"&gt;#12  Short offline       Completed without error       00%      8981         -&lt;/span&gt;
&lt;span class="c"&gt;#13  Short offline       Completed without error       00%         1         -&lt;/span&gt;

SMART Selective self-test log data structure revision number 1
 SPAN  MIN_LBA  MAX_LBA  CURRENT_TEST_STATUS
    &lt;span class="m"&gt;1&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;  Not_testing
    &lt;span class="m"&gt;2&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;  Not_testing
    &lt;span class="m"&gt;3&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;  Not_testing
    &lt;span class="m"&gt;4&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;  Not_testing
    &lt;span class="m"&gt;5&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt;  Not_testing
Selective self-test flags &lt;span class="o"&gt;(&lt;/span&gt;0x0&lt;span class="o"&gt;)&lt;/span&gt;:
  After scanning selected spans, &lt;span class="k"&gt;do&lt;/span&gt; NOT &lt;span class="nb"&gt;read&lt;/span&gt;-scan remainder of disk.
If Selective self-test is pending on power-up, resume after &lt;span class="m"&gt;0&lt;/span&gt; minute delay.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OS側からエラーだからといって外されるのにS.M.A.R.T.では検出されないのね…&lt;/p&gt;</summary><category term="HDD"></category></entry><entry><title>裁断機(DC-210N)を購入してみた</title><link href="/posts/2014/10/dc-210n.html" rel="alternate"></link><updated>2014-10-28T00:48:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-10-28:posts/2014/10/dc-210n.html</id><summary type="html">&lt;p&gt;もうずっと読んでいない参考書とか、学生時代の教科書とかを整理したいので裁断機を購入してみました&lt;br /&gt;
色々検討したんですが大型の裁断機ではなく、それより簡易的な &lt;a href="http://www.carl.co.jp/item/DC-210N.html"&gt;DC-210N&lt;/a&gt; を選択&lt;br /&gt;
一度に裁断できる枚数が40枚ということなので、裁断する前にまず本を分解する作業が必ず入るけれど&lt;br /&gt;
まぁ元々そんなに本を買う方でないので使う機会もそれほど頻繁でないだろうということでしまっておけるこのモデルにしました&lt;/p&gt;
&lt;p&gt;外観&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2014/10/DC-210N_1.jpg"&gt;&lt;img alt="image" src="/static/images/2014/10/DC-210N_1_s.jpg" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2014/10/DC-210N_2.jpg"&gt;&lt;img alt="image" src="/static/images/2014/10/DC-210N_2_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回はお試しでこの冊子を裁断してみます&lt;br /&gt;
薄いので分割しなくても裁断できました&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2014/10/DC-210N_3.jpg"&gt;&lt;img alt="image" src="/static/images/2014/10/DC-210N_3_s.jpg" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2014/10/DC-210N_4.jpg"&gt;&lt;img alt="image" src="/static/images/2014/10/DC-210N_4_s.jpg" /&gt;&lt;/a&gt;
&lt;a href="/static/images/2014/10/DC-210N_5.jpg"&gt;&lt;img alt="image" src="/static/images/2014/10/DC-210N_5_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="e-book"></category></entry><entry><title>操作ミスでファイルを消してしまった時の復活方法</title><link href="/posts/2014/10/extundelete.html" rel="alternate"></link><updated>2014-10-23T01:00:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-10-23:posts/2014/10/extundelete.html</id><summary type="html">&lt;p&gt;ファイルサーバのデータを整理中に &lt;code&gt;rm *hoge*&lt;/code&gt; と入力しようとして &lt;code&gt;rm *&lt;/code&gt; まで入力した状態で&lt;br /&gt;
hogeをコピペで貼り付けようとしました&lt;br /&gt;
この時hogeの先頭に改行が含まれていたため、 &lt;code&gt;rm *&lt;/code&gt; が実行されてしまい&lt;br /&gt;
カレントディレクトリ内のファイルを全て削除してしまいました、事故です&lt;br /&gt;
このような場合、 &lt;a href="http://extundelete.sourceforge.net/"&gt;extundelete&lt;/a&gt; というソフトを使うと復活できるみたいなので、試してみました&lt;/p&gt;
&lt;p&gt;まず削除してしまったファイルがあるボリュームをroでマウントしなおします&lt;br /&gt;
この作業はできるだけ早く行う必要があります&lt;br /&gt;
自分の場合、別のプロセスがこのボリュームに書き込みをしていたので&lt;br /&gt;
削除したファイルのinodeが再利用されてしまいかなりのファイルを失いました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# mount -o remount,ro /mnt/lvm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にdateコマンドで操作ミスが発生した時刻の確認をします&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;date +%s
1413993600
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;extundeleteで復活させます&lt;br /&gt;
復活できなかったファイルが以下のようにログに出力されて&lt;br /&gt;
復活できたファイルはカレントディレクトリの &lt;code&gt;RECOVERED_FILES&lt;/code&gt; 以下に出力されます&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# extundelete --restore-all --after 1413993600 /dev/mapper/vg0-lv0&lt;/span&gt;
Only show and process deleted entries &lt;span class="k"&gt;if&lt;/span&gt; they are deleted on or after &lt;span class="m"&gt;1413993600&lt;/span&gt; and before 9223372036854775807.
NOTICE: Extended attributes are not restored.
Loading filesystem metadata ... &lt;span class="m"&gt;52164&lt;/span&gt; groups loaded.
Loading journal descriptors ... &lt;span class="m"&gt;26255&lt;/span&gt; descriptors loaded.
Searching &lt;span class="k"&gt;for&lt;/span&gt; recoverable inodes in directory / ...
&lt;span class="m"&gt;160&lt;/span&gt; recoverable inodes found.
Looking through the directory structure &lt;span class="k"&gt;for&lt;/span&gt; deleted files ...
Unable to restore inode &lt;span class="m"&gt;224265493&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;/path/to/deleted/file&lt;span class="o"&gt;)&lt;/span&gt;: Space has been reallocated.
Unable to restore inode &lt;span class="m"&gt;224265494&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;/path/to/deleted/file&lt;span class="o"&gt;)&lt;/span&gt;: Space has been reallocated.
Unable to restore inode &lt;span class="m"&gt;224265503&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;/path/to/deleted/file&lt;span class="o"&gt;)&lt;/span&gt;: Space has been reallocated.
...
Unable to restore inode &lt;span class="m"&gt;91544629&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;/path/to/deleted/file&lt;span class="o"&gt;)&lt;/span&gt;: No undeleted copies found in the journal.
Unable to restore inode &lt;span class="m"&gt;91544798&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;/path/to/deleted/file&lt;span class="o"&gt;)&lt;/span&gt;: No undeleted copies found in the journal.
Unable to restore inode &lt;span class="m"&gt;91544633&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;/path/to/deleted/file&lt;span class="o"&gt;)&lt;/span&gt;: No undeleted copies found in the journal.
...
&lt;span class="m"&gt;30&lt;/span&gt; recoverable inodes still lost.
Unable to restore inode &lt;span class="m"&gt;99378493&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;file.99378493&lt;span class="o"&gt;)&lt;/span&gt;: No undeleted copies found in the journal.
Unable to restore inode &lt;span class="m"&gt;99379721&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;file.99379721&lt;span class="o"&gt;)&lt;/span&gt;: No undeleted copies found in the journal.
Unable to restore inode &lt;span class="m"&gt;99379967&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;file.99379967&lt;span class="o"&gt;)&lt;/span&gt;: No undeleted copies found in the journal.
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;オペミス怖いですね…&lt;br /&gt;
とりあえず &lt;code&gt;rm&lt;/code&gt; は &lt;code&gt;rm -i&lt;/code&gt; のエイリアスにしておこうかと思います&lt;/p&gt;</summary><category term="Linux"></category></entry><entry><title>Windows10を試してみた</title><link href="/posts/2014/10/windows10.html" rel="alternate"></link><updated>2014-10-06T01:45:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-10-06:posts/2014/10/windows10.html</id><summary type="html">&lt;p&gt;&lt;a href="http://windows.microsoft.com/ja-jp/windows/preview"&gt;Windows10 Technical Preview&lt;/a&gt;がでたのでKVMにインストールしてみた&lt;br /&gt;
このサイトにLinuxからアクセスすると「お使いのオペレーティング システムにはプレビュー版をインストールできません。」と&lt;br /&gt;
表示されるがUserAgentをIEに変更してから再度アクセスしたらダウンロードすることができた&lt;/p&gt;
&lt;p&gt;QEMUはひさしぶりなので使い方を忘れていたんだけれど以下のようにすることで特に問題なくインストールして動作させることができた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;qemu-img create -f qcow2 windows10.img 32G
&lt;span class="nv"&gt;$ &lt;/span&gt;qemu-system-x86_64 -enable-kvm -cpu host -hda windows10.img -cdrom Windows10-en-x64.iso -boot d -m 4G
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただ電源の切り方がWindows8.1から更に変更されているので少し戸惑った&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2014/10/windows10.jpg"&gt;&lt;img alt="Windows10 with KVM" src="/static/images/2014/10/windows10_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Linux"></category><category term="Gentoo"></category><category term="KVM"></category><category term="Windows"></category></entry><entry><title>今更Sambaをインストールした</title><link href="/posts/2014/09/samba.html" rel="alternate"></link><updated>2014-09-01T13:42:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-09-01:posts/2014/09/samba.html</id><summary type="html">&lt;p&gt;しばらく前に&lt;a href="http://www.asus.com/jp/Tablets_Mobile/ASUS_VivoTab_Note_8_M80TA/"&gt;ASUS VivoTab Note 8&lt;/a&gt;を買ったり、&lt;a href="http://h50146.www5.hp.com/directplus/personal/notebooks/dp_pavilion15_n200_amd/"&gt;HP Pavilion 15-n200 (AMD)&lt;/a&gt;が29800円だったので妻に買ったりMacBook Airもあるし&lt;br /&gt;
Linux以外のマシンが増えてきたので、これらのマシンからもファイルサーバを利用できるようにSambaの導入をしました&lt;br /&gt;
今までは自分のLinuxマシンだけだったんでNFSで間に合ってたんだけどね&lt;/p&gt;
&lt;p&gt;Gentooでのインストールは特に気にすることなくいつも通り&lt;br /&gt;
自分はクライアントの機能は不要だったので &lt;code&gt;-client&lt;/code&gt; と &lt;code&gt;-smbclient&lt;/code&gt; を指定した&lt;br /&gt;
デフォルトの設定ファイルをコピーして自分の設定を作っていく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# emerge -av samba&lt;/span&gt;
&lt;span class="c"&gt;# cp /etc/samba/smb.conf.default /etc/samba/smb.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下に変更した設定をメモしておく&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workgroup = WORKGROUP&lt;br /&gt;
Windowsのデフォルトに合わせる&lt;/li&gt;
&lt;li&gt;hosts allow = 10.0.0.&lt;br /&gt;
hosts deny = all&lt;br /&gt;
LAN内のマシン以外からのアクセスを拒否する&lt;/li&gt;
&lt;li&gt;load printers = no&lt;br /&gt;
プリンタはいらない&lt;/li&gt;
&lt;li&gt;interfaces = br0&lt;br /&gt;
bind interfaces only = yes&lt;br /&gt;
LAN側のNICでのみ待ち受ける&lt;/li&gt;
&lt;li&gt;max protocol = smb2&lt;br /&gt;
全てWindows8.1なので新しいプロトコルが使える&lt;/li&gt;
&lt;li&gt;map to guest = Bad User&lt;br /&gt;
ログインに失敗した場合はGuestユーザとして扱う&lt;br /&gt;
共有ディレクトリの設定の部分で &lt;code&gt;public = yes&lt;/code&gt; と設定するとアクセス可能になる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;共有ディレクトリの設定はこのようにした&lt;br /&gt;
元々あった &lt;code&gt;homes&lt;/code&gt; と &lt;code&gt;printers&lt;/code&gt; は不要なのでコメントアウトして&lt;br /&gt;
新たにSamba用のディレクトリ以下を公開することにした&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Home]&lt;/span&gt;
   &lt;span class="na"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Home Directories&lt;/span&gt;
&lt;span class="s"&gt;   path = /mnt/lvm/samba/%u&lt;/span&gt;
&lt;span class="s"&gt;   writable = yes&lt;/span&gt;
&lt;span class="s"&gt;   printable = no&lt;/span&gt;

&lt;span class="k"&gt;[Public]&lt;/span&gt;
   &lt;span class="na"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Public&lt;/span&gt;
&lt;span class="s"&gt;   path = /mnt/lvm/samba/Public&lt;/span&gt;
&lt;span class="s"&gt;   public = yes&lt;/span&gt;
&lt;span class="s"&gt;   writable = yes&lt;/span&gt;
&lt;span class="s"&gt;   printable = no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;共有ディレクトリにアクセスできるユーザを作るにはまずLinuxのユーザを作成しなければいけない&lt;br /&gt;
その後、既存のLinuxのユーザをSambaへ登録する操作が必要になる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# useradd sambauser&lt;/span&gt;
&lt;span class="c"&gt;# pdbedit -a -u sambauser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なおSamba側に登録されているユーザの一覧は &lt;code&gt;pdbedit -L -v&lt;/code&gt; で確認できる&lt;/p&gt;
&lt;p&gt;以上で設定は終了&lt;br /&gt;
&lt;code&gt;testparm&lt;/code&gt; コマンドを実行すると設定の確認ができる&lt;br /&gt;
最後にサービスへの登録と起動をする&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# rc-update add samba default&lt;/span&gt;
&lt;span class="c"&gt;# /etc/init.d/samba start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでクライアント側から見れるようになるはず&lt;br /&gt;
ただWindows、Macどちらの場合もワークグループ名を明示的に指定しないとログインできなかった&lt;br /&gt;
ユーザ名の欄に &lt;code&gt;WORKGROUP\sambauser&lt;/code&gt; のようにワークグループ名を指定した形式で入力しなければならない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsは &lt;code&gt;エクスプローラ&lt;/code&gt; の &lt;code&gt;ネットワーク&lt;/code&gt; にサーバが表示されるのでダブルクリックして接続&lt;/li&gt;
&lt;li&gt;Macは &lt;code&gt;Finder&lt;/code&gt; -&amp;gt; &lt;code&gt;Go&lt;/code&gt; -&amp;gt; &lt;code&gt;Connect to Server&lt;/code&gt; で表示されるダイアログに &lt;code&gt;smb://hostname&lt;/code&gt; と入力し接続&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの設定で今のところ問題なく使用できている&lt;br /&gt;
しかし &lt;code&gt;/var/log/samba/log.smbd&lt;/code&gt; にこのようなログが出ているのでそのうち修正したい &lt;a href="http://inaz2.hatenablog.com/entry/2013/07/07/054616"&gt;*1&lt;/a&gt; &lt;a href="http://consultancy.edvoncken.net/index.php/HOWTO_Disable_printing_in_Samba"&gt;*2&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Unable to open printcap file /etc/printcap for read!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この設定の追加で上記のエラーが出なくなった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;printing = bsd&lt;/li&gt;
&lt;li&gt;printcap name = /dev/null&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Samba"></category><category term="Linux"></category><category term="Gentoo"></category><category term="Windows"></category><category term="Mac"></category></entry><entry><title>MySQL5.1から5.5へアップデート</title><link href="/posts/2014/08/mysql5.5.html" rel="alternate"></link><updated>2014-08-31T03:32:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-08-31:posts/2014/08/mysql5.5.html</id><summary type="html">&lt;p&gt;GentooからMySQL5.5がStableになったし5.1はmaskするよ、というお知らせが来ていました&lt;br /&gt;
epgrecとMediatombで使っているのですが5.5でも問題なさそうなのでアップデートしました&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MySQLの停止&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# /etc/init.d/mysql stop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;emergeを使用してアップデート&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# emerge -uav mysql&lt;/span&gt;
&lt;span class="c"&gt;# etc-update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDBが有効になっているとepgrecが遅くなるみたいなので設定を変更する &lt;a href="http://sarami.pv.s-labo.com/blog/zatta/?p=221"&gt;*&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt; に以下の二行を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;skip-innodb
default-storage-engine=MyISAM
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;関連パッケージの更新&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# emerge @preserved-rebuild -a&lt;/span&gt;
&lt;span class="c"&gt;# revdep-rebuild --library libmysqlclient.so.16&lt;/span&gt;
&lt;span class="c"&gt;# revdep-rebuild --library libmysqlclient_r.so.16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQLを再起動&lt;br /&gt;
再起動すると &lt;code&gt;/var/log/mysql/mysqld.err&lt;/code&gt; に以下のようなエラーが出力されて&lt;br /&gt;
&lt;code&gt;mysql_upgrade&lt;/code&gt; を実行するように指示されます &lt;a href="http://server-setting.info/centos/mysql5-1_mysql5-5_upgrade.html"&gt;*&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# /etc/init.d/mysql start&lt;/span&gt;
&lt;span class="c"&gt;# tail /var/log/mysql/mysqld.err&lt;/span&gt;
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Missing system table mysql.proxies_priv&lt;span class="p"&gt;;&lt;/span&gt; please run mysql_upgrade to create it
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;events_waits_current&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;events_waits_history&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;events_waits_history_long&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;setup_consumers&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;setup_instruments&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;setup_timers&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;performance_timers&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;threads&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;events_waits_summary_by_thread_by_event_name&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;events_waits_summary_by_instance&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;events_waits_summary_global_by_event_name&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;file_summary_by_event_name&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;file_summary_by_instance&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;mutex_instances&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;rwlock_instances&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;cond_instances&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;ERROR&lt;span class="o"&gt;]&lt;/span&gt; Native table &lt;span class="s1"&gt;&amp;#39;performance_schema&amp;#39;&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;file_instances&amp;#39;&lt;/span&gt; has the wrong structure
&lt;span class="m"&gt;140830&lt;/span&gt; 20:53:41 &lt;span class="o"&gt;[&lt;/span&gt;Note&lt;span class="o"&gt;]&lt;/span&gt; Event Scheduler: Loaded &lt;span class="m"&gt;0&lt;/span&gt; events
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBの更新と再度MySQLを再起動&lt;br /&gt;
再起動後にログを確認してエラーがでていなければ完了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# mysql_upgrade -u root -p&lt;/span&gt;
&lt;span class="c"&gt;# /etc/init.d/mysql restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="MySQL"></category><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>Nginxで自己署名証明書を使う</title><link href="/posts/2014/08/self-signed-certificate.html" rel="alternate"></link><updated>2014-08-16T02:42:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-08-16:posts/2014/08/self-signed-certificate.html</id><summary type="html">&lt;p&gt;ドメインを取ったのでそのうちきちんとした証明書を使おうかとは思っていますが&lt;br /&gt;
とりあえずしばらくはオレオレ証明書で運用しようと思っています&lt;br /&gt;
ということで作成の仕方をメモ&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;パスフレーズなしの秘密鍵を作成&lt;br /&gt;
色々なサイトを見ていると一度パスフレーズありで作成してから&lt;br /&gt;
パスフレーズを削除したファイルを作りなおすような手順を踏んでいたりしますがこれでよさそう&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# openssl genrsa -out server.key 2048&lt;/span&gt;
Generating RSA private key, &lt;span class="m"&gt;2048&lt;/span&gt; bit long modulus
................................................+++
........................................+++
e is &lt;span class="m"&gt;65537&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0x10001&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公開鍵の作成&lt;br /&gt;
HTTPSで暗号化されていればいいだけなので &lt;code&gt;Common Name&lt;/code&gt; 以外は適当でいいです&lt;br /&gt;
&lt;code&gt;.&lt;/code&gt; を入力した場合そのフィールドは空になるみたいなので全て空にしました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# openssl req -new -key server.key -out server.csr&lt;/span&gt;
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Country Name &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; letter code&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;AU&lt;span class="o"&gt;]&lt;/span&gt;:.
State or Province Name &lt;span class="o"&gt;(&lt;/span&gt;full name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Some-State&lt;span class="o"&gt;]&lt;/span&gt;:.
Locality Name &lt;span class="o"&gt;(&lt;/span&gt;eg, city&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;:
Organization Name &lt;span class="o"&gt;(&lt;/span&gt;eg, company&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span class="o"&gt;]&lt;/span&gt;:.
Organizational Unit Name &lt;span class="o"&gt;(&lt;/span&gt;eg, section&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;:
Common Name &lt;span class="o"&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;:&amp;lt;your domain name&amp;gt;
Email Address &lt;span class="o"&gt;[]&lt;/span&gt;:

Please enter the following &lt;span class="s1"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt; attributes
to be sent with your certificate request
A challenge password &lt;span class="o"&gt;[]&lt;/span&gt;:
An optional company name &lt;span class="o"&gt;[]&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;証明書の作成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt&lt;/span&gt;
Signature ok
&lt;span class="nv"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/CN&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;your domain name&amp;gt;
Getting Private key
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以上で証明書の準備はできたので &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; を編集して再起動すれば完了です&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
        listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
        ssl_certificate     /path/to/certificate/server.crt&lt;span class="p"&gt;;&lt;/span&gt;
        ssl_certificate_key /path/to/certificate/server.key&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Nginx"></category><category term="Linux"></category></entry><entry><title>MacUIM/Mozcを使う</title><link href="/posts/2014/08/macuim-mozc.html" rel="alternate"></link><updated>2014-08-02T02:04:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-08-02:posts/2014/08/macuim-mozc.html</id><summary type="html">&lt;p&gt;ターミナルは&lt;a href="http://software.schmorp.de/pkg/rxvt-unicode.html"&gt;rxvt-unicode&lt;/a&gt;をビルドして使用しています&lt;br /&gt;
これはX11のアプリなのでMacの標準のインプットメソッド経由では日本語を入力することができません&lt;br /&gt;
今までほとんど困ることはなくて、必要なときはコピペで対応していました&lt;br /&gt;
ただ最近ここをvimで書いていることもあり、&lt;a href="https://code.google.com/p/macuim/"&gt;MacUIM&lt;/a&gt;をインストールして入力できるようにしました&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;まず上記サイトからダウンロードしてきたアーカイブをインストールします&lt;/li&gt;
&lt;li&gt;次に &lt;code&gt;System Preferences -&amp;gt; Language &amp;amp; Text -&amp;gt; Input Sources&lt;/code&gt; で &lt;code&gt;MacUIM (Japanese)&lt;/code&gt; のチェックを入れる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System Preferences -&amp;gt; MacUIM&lt;/code&gt; を開いて&lt;ol&gt;
&lt;li&gt;&lt;code&gt;General -&amp;gt; Input Method&lt;/code&gt; で &lt;code&gt;Mozc&lt;/code&gt; を選択&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Helper -&amp;gt; Use Helper-Applet&lt;/code&gt; をチェック (メニューバーに状態が表示される)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uim -&amp;gt; Global settings -&amp;gt; Specify default IM&lt;/code&gt; をチェック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uim -&amp;gt; Global settings -&amp;gt; Default input method&lt;/code&gt; で &lt;code&gt;Mozc&lt;/code&gt; を選択&lt;/li&gt;
&lt;li&gt;右下の &lt;code&gt;Apply&lt;/code&gt; ボタンを押す&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;~/.xinitrc.d/uim-xim.sh&lt;/code&gt; に以下の内容で起動スクリプトを配置する&lt;br /&gt;
このファイルを追加することでX11の起動時にUIMが起動する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
/Library/Frameworks/UIM.framework/Versions/Current/bin/uim-xim &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt; にでも以下の環境変数を追加する&lt;br /&gt;
X11でurxvtしか使わないのであればこれでOK&lt;br /&gt;
他のアプリでも使用する場合は他からも見える位置で環境変数を定義する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;XMODIFIERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@im=uim&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uim&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;urxvtの起動時に &lt;code&gt;-pt OffTheSpot&lt;/code&gt; を追加する&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;とりあえずここまででデフォルトの &lt;code&gt;Shift+Space&lt;/code&gt; を使用すれば日本語入力ができるようになっているはず&lt;br /&gt;
ここからはおまけ&lt;br /&gt;
Input sourceはMacUIM固定で &lt;code&gt;Cmd+Space&lt;/code&gt; を日英の切り替えに使用したければ以下の設定をする&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;System Preferences -&amp;gt; Language &amp;amp; Text -&amp;gt; Input Sources&lt;/code&gt; を開いて&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Input source shortcuts&lt;/code&gt; にあるショートカットを無効にする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Input source options&lt;/code&gt; は &lt;code&gt;Use the same one in all documents&lt;/code&gt; を選択&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;~/.uim.d/customs/custom-mozc-keys.scm&lt;/code&gt; をエディタで開いて以下の部分を編集する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(define mozc-on-key &amp;#39;(&amp;quot;&amp;lt;Meta&amp;gt; &amp;quot;))
(define mozc-on-key? (make-key-predicate &amp;#39;(&amp;quot;&amp;lt;Meta&amp;gt; &amp;quot;)))
(define mozc-off-key &amp;#39;(&amp;quot;&amp;lt;Meta&amp;gt; &amp;quot;))
(define mozc-off-key? (make-key-predicate &amp;#39;(&amp;quot;&amp;lt;Meta&amp;gt; &amp;quot;)))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;System Preferences -&amp;gt; MacUIM&lt;/code&gt; を開いて&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Uim -&amp;gt; Global settings -&amp;gt; Enable input method toggle by hot key&lt;/code&gt; のチェックを外す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uim -&amp;gt; Mozc key bindings&lt;/code&gt; の &lt;code&gt;on&lt;/code&gt; と &lt;code&gt;off&lt;/code&gt; が &lt;code&gt;&amp;lt;Meta&amp;gt;space&lt;/code&gt; になっていることを確認&lt;/li&gt;
&lt;li&gt;右下の &lt;code&gt;Apply&lt;/code&gt; ボタンを押す&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上で &lt;code&gt;Cmd+Space&lt;/code&gt; の入力でネイティブでもX11でも日本語入力の切り替えをすることができるようになりました&lt;/p&gt;</summary><category term="Mac"></category><category term="MacUIM"></category><category term="Mozc"></category></entry><entry><title>AquesTalk pico LSIをI2Cで接続する</title><link href="/posts/2014/07/aquestalk-i2c.html" rel="alternate"></link><updated>2014-07-25T23:49:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-07-25:posts/2014/07/aquestalk-i2c.html</id><summary type="html">&lt;p&gt;ArduinoとAquesTalkをI2Cで接続してみました&lt;br /&gt;
配線は以下の通り  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pin&lt;/th&gt;
&lt;th&gt;AquesTalk&lt;/th&gt;
&lt;th&gt;-&amp;gt;&lt;/th&gt;
&lt;th&gt;Arduino&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;/RESET&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;RESET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;SMOD0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;SMOD1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;VCC&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;SDA&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;A4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;SCL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;A5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;SMOD0&lt;/code&gt; と &lt;code&gt;SMOD1&lt;/code&gt; については技術資料の &lt;code&gt;表9.1 通信モード&lt;/code&gt; を参照&lt;br /&gt;
I2Cで接続するには &lt;code&gt;SMOD0 = 0&lt;/code&gt; 、 &lt;code&gt;SMOD1 = 1&lt;/code&gt; にする必要があります&lt;br /&gt;
あとは12番の &lt;code&gt;AOUT&lt;/code&gt; をアンプの &lt;code&gt;IN+&lt;/code&gt; 、 &lt;code&gt;GND&lt;/code&gt; を &lt;code&gt;IN-&lt;/code&gt; に接続します&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2014/07/IMAG1036.jpg"&gt;&lt;img alt="AquesTalk pico LSI I2C" src="/static/images/2014/07/IMAG1036_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;技術資料の &lt;code&gt;5. 基本回路&lt;/code&gt; にある回路図を見ると、これ以外に &lt;code&gt;VCC&lt;/code&gt; と &lt;code&gt;AOUT&lt;/code&gt; にコンデンサが追加されています&lt;br /&gt;
これはバイパスコンデンサというものらしく電源の安定化やノイズの発生を抑えたりする役割があるそうです &lt;a href="http://www.geocities.jp/zattouka/GarageHouse/micon/circuit/VoltREG.htm#pascon"&gt;*1&lt;/a&gt;&lt;br /&gt;
とりあえず、無しでも動きました(ぇ&lt;/p&gt;
&lt;p&gt;他に &lt;code&gt;9.2. I2C通信&lt;/code&gt; の部分を見ると &lt;code&gt;SDA&lt;/code&gt; 、 &lt;code&gt;SCL&lt;/code&gt; 共に &lt;code&gt;5KΩ&lt;/code&gt; 程度のプルアップ抵抗が必要とあります&lt;br /&gt;
プルアップ抵抗なんですが調べたところ標準の &lt;code&gt;Wire.h&lt;/code&gt; を使う場合Arduino内蔵の抵抗で問題なさそうなので &lt;a href="http://www.senio.co.jp/bbs/viewtopic.php?f=7&amp;amp;t=260"&gt;*2&lt;/a&gt; &lt;a href="http://myboom.mkch.net/modules/pukiwiki/180.html"&gt;*3&lt;/a&gt;&lt;br /&gt;
これも無しで試したところ、動きました&lt;/p&gt;
&lt;p&gt;というわけでAquesTalk以外に特に部品を追加することなく準備ができました&lt;br /&gt;
動作確認に使用したスケッチは&lt;a href="https://github.com/lostman-github/arduino/blob/master/Uno/AquesTalk/sample/sample.ino"&gt;GitHub&lt;/a&gt;にありますがここに貼り付けておきます &lt;a href="http://enajet.air-nifty.com/blog/2012/01/aquestalk-pico-.html"&gt;*4&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;Wire.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define PICO_I2C_ADDRESS 0x2E&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Wire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Wire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;beginTransmission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PICO_I2C_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Wire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yukkurisiteittene&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Wire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endTransmission&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// send once&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Wire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PICO_I2C_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Arduino"></category><category term="AquesTalk pico LSI"></category></entry><entry><title>GitHub Pages関連で調べたこと</title><link href="/posts/2014/07/github-pages.html" rel="alternate"></link><updated>2014-07-24T00:16:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-07-24:posts/2014/07/github-pages.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository"&gt;Adding a CNAME file to your repository&lt;/a&gt;&lt;br /&gt;
  サブドメインを使用する場合はリポジトリに割り当てたいサブドメインを書いた &lt;code&gt;CNAME&lt;/code&gt; ファイルを追加するのと、&lt;br /&gt;
  使用しているDNSの設定でサブドメインと &lt;code&gt;hoge.github.io&lt;/code&gt; をCNAMEで関連付ける&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/using-submodules-with-pages"&gt;Using submodules with Pages&lt;/a&gt;&lt;br /&gt;
  gitのsubmoduleを使用する場合、リポジトリのURLは &lt;code&gt;git://&lt;/code&gt; でなく &lt;code&gt;https://&lt;/code&gt; を使用しなければいけない&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/using-jekyll-with-pages#turning-jekyll-off"&gt;Turning Jekyll off&lt;/a&gt;&lt;br /&gt;
  デフォルトでJekyllが有効になっているので &lt;code&gt;*.rst&lt;/code&gt; なファイルをアップロードすると変換しようとする&lt;br /&gt;
  これを無効にするために &lt;code&gt;.nojekyll&lt;/code&gt; をリポジトリのルートに作成する&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GitHub"></category></entry><entry><title>AquesTalk pico LSIの動作確認</title><link href="/posts/2014/07/aquestalk.html" rel="alternate"></link><updated>2014-07-21T17:49:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-07-21:posts/2014/07/aquestalk.html</id><summary type="html">&lt;p&gt;以前購入していた&lt;a href="http://www.a-quest.com/products/aquestalkpicolsi.html"&gt;ATP3011F1-PU&lt;/a&gt;(&lt;a href="http://akizukidenshi.com/catalog/g/gI-06220/"&gt;秋月&lt;/a&gt;で850円)の動作確認をしてみました&lt;br /&gt;
紹介動画にもありますがArduino UNOに挿してアンプ付きのスピーカと接続、&lt;br /&gt;
PCからシリアルモニタで文字を送信するだけで音声を出すことができます&lt;br /&gt;
(技術資料 &lt;code&gt;13.4. Arduinoボードを利用した簡易動作&lt;/code&gt; を参照)&lt;br /&gt;
通常Arduinoから使う場合はI2C接続で使うことになると思いますが、&lt;br /&gt;
I2C接続は後日試すとして今回はこの方法で動作確認をしてみました&lt;/p&gt;
&lt;p&gt;まずうちにはアンプ付きのスピーカなんて無いのでそれを用意するところから&lt;br /&gt;
せっかくなのでこれも秋月で買ってきて組み立ててみました&lt;br /&gt;
といっても個別にパーツを揃えたわけでなく&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://akizukidenshi.com/catalog/g/gK-08217/"&gt;ＰＡＭ８０１２使用２ワットＤ級アンプモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akizukidenshi.com/catalog/g/gK-05363/"&gt;３．５ｍｍステレオミニジャックＤＩＰ化キット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akizukidenshi.com/catalog/g/gP-02679/"&gt;電池ボックス　単３×２本（リード線・耳付）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;100均で売っているスピーカ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらを接続しただけです&lt;br /&gt;
今回試した手順を以下にまとめておきます&lt;br /&gt;
後半は技術資料に書いてあるものそのままで、どちらかと言うと前半が僕には必要でした&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ArduinoのLSIを取り外し、AquesTalkを取り付け&lt;/li&gt;
&lt;li&gt;Arduinoの &lt;code&gt;デジタル6番&lt;/code&gt; をアンプの &lt;code&gt;IN+&lt;/code&gt; に接続&lt;/li&gt;
&lt;li&gt;Arduinoの &lt;code&gt;GND&lt;/code&gt; をアンプの &lt;code&gt;IN-&lt;/code&gt; に接続&lt;/li&gt;
&lt;li&gt;アンプの &lt;code&gt;+V&lt;/code&gt; と &lt;code&gt;GND&lt;/code&gt; をそれぞれ電池に接続&lt;/li&gt;
&lt;li&gt;アンプの &lt;code&gt;SPK+&lt;/code&gt; と &lt;code&gt;SPK-&lt;/code&gt; をジャックの &lt;code&gt;R&lt;/code&gt; と &lt;code&gt;G&lt;/code&gt; に接続&lt;/li&gt;
&lt;li&gt;ジャックにスピーカを接続&lt;/li&gt;
&lt;li&gt;ArduinoをPCに接続、Arduino IDEを起動&lt;/li&gt;
&lt;li&gt;メニューの &lt;code&gt;Tools -&amp;gt; Serial Monitor&lt;/code&gt; を開く&lt;/li&gt;
&lt;li&gt;右下のコンボボックスで &lt;code&gt;Carriage return&lt;/code&gt; と &lt;code&gt;9600bps&lt;/code&gt; を選択&lt;/li&gt;
&lt;li&gt;上のインプットボックスに &lt;code&gt;?&lt;/code&gt; を入力してEnter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;konnichiwa&lt;/code&gt; 等を入力してEnterを押すと発声する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;発声させるためのテキストは技術資料を参照するか、&lt;br /&gt;
&lt;a href="http://www.a-quest.com/demo/pico_kanji2roman.html"&gt;音声記号列生成 Webサービス&lt;/a&gt;を使用して作成します&lt;/p&gt;
&lt;p&gt;&lt;a href="/static/images/2014/07/IMAG1027.jpg"&gt;&lt;img alt="AquesTalk pico LSI" src="/static/images/2014/07/IMAG1027_s.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="Arduino"></category><category term="AquesTalk pico LSI"></category></entry><entry><title>PhantomJSを使ってみた</title><link href="/posts/2014/07/phantomjs.html" rel="alternate"></link><updated>2014-07-20T03:30:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-07-20:posts/2014/07/phantomjs.html</id><summary type="html">&lt;p&gt;はじめて&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;使ってみました&lt;br /&gt;
仕事で間接的に使ったことはありましたが、&lt;br /&gt;
プライベートで使ったのははじめてということでテストも兼ねて記事にしてみます&lt;/p&gt;
&lt;p&gt;なにに使ったかというと&lt;br /&gt;
ドメインの管理ページのDNSの設定の書き換えの自動化です&lt;br /&gt;
このサイトのドメインは&lt;a href="http://www.star-domain.jp/"&gt;スタードメイン&lt;/a&gt;で管理しているのですが、&lt;br /&gt;
ここはDDNSの機能は提供していないんですね&lt;br /&gt;
このサイトはCNAMEを固定で設定できればいいので特に必要はないんですが、&lt;br /&gt;
サブドメインを使って固定IPアドレスでない自宅のマシンにもアクセスできるようにしたかったのです&lt;br /&gt;
ただ手動では面倒なのでできれば何らかの方法で自動的に更新しようと考えました&lt;/p&gt;
&lt;p&gt;一般的には&lt;a href="http://www.mydns.jp/"&gt;MyDNS&lt;/a&gt;等の外部のDDNSの機能を提供しているサービスを使用して&lt;br /&gt;
このドメインで使用しているネームサーバをDDNSが提供しているものに変更するみたいです&lt;br /&gt;
一応この方法も試して動作することも確認しましたが、&lt;br /&gt;
PhantomJSを使って書き換える方法も比較的容易に実現できそうだったのでやってみました&lt;/p&gt;
&lt;p&gt;ソースは&lt;a href="https://github.com/lostman-github/stardomain-ddns"&gt;ここ&lt;/a&gt;に置いてあります&lt;br /&gt;
READMEにも書いてありますが実行方法は以下です&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;phantomjs stardomain-ddns.js &lt;span class="s2"&gt;&amp;quot;&amp;lt;email address&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;password&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;file name of DNS records&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;メールアドレスとパスワードはログインするために必要なもの&lt;br /&gt;
あとはDNSの設定が書いてあるファイルのファイル名を指定します&lt;br /&gt;
このファイルの中身はスタードメインの管理ページの&lt;br /&gt;
&lt;code&gt;レコード一括編集(テキストエリア)&lt;/code&gt; のページに表示される形式にしておきます&lt;br /&gt;
なので一度手動で設定しておいて、一括編集の画面からコピペしてファイルを作ると簡単です&lt;br /&gt;
スクリプトを実行すると現在の設定とファイルの中身が一致しなかった場合更新します&lt;/p&gt;
&lt;p&gt;このスクリプトを書くにあたってはまった部分がクリックの操作です&lt;br /&gt;
inputタグのボタンをクリックするには以下のようします&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;action_user_dns_index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;しかし、aタグのリンクをクリックしたい場合はうまくいきません (Firefoxでは上の書き方でも動作するんですよね&lt;br /&gt;
色々調べたら安心と信頼の&lt;a href="http://stackoverflow.com/questions/2705583/how-to-simulate-a-click-with-javascript/2706236#2706236"&gt;Stack Overflow&lt;/a&gt;に書いてあったのでそれを参考にしました&lt;br /&gt;
以下のようにするとクリックイベントを発生させることができました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;submenu_04&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;firstElementChild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Events&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="JavaScript"></category><category term="PhantomJS"></category></entry><entry><title>Pelicanはじめました</title><link href="/posts/2014/07/pelican.html" rel="alternate"></link><updated>2014-07-20T00:10:00+09:00</updated><author><name>lostman/ごる</name></author><id>tag:,2014-07-20:posts/2014/07/pelican.html</id><summary type="html">&lt;p&gt;Bloggerでブログを書いていましたが順次こちらへ移行する予定&lt;br /&gt;
このページは&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;に&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;で生成したコンテンツを置いています&lt;br /&gt;
pipでpelicanとMarkdownをインストールするだけなので準備は簡単ですね&lt;/p&gt;</summary><category term="Pelican"></category></entry></feed>